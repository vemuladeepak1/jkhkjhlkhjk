[{"D:\\prohiree-MERN\\prohiree\\client\\src\\index.js":"1","D:\\prohiree-MERN\\prohiree\\client\\src\\reportWebVitals.js":"2","D:\\prohiree-MERN\\prohiree\\client\\src\\App.js":"3","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Navbar.js":"4","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Signup.js":"5","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Home.js":"6","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Applications.js":"7","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\recruiter\\CreateJobs.js":"8","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Login.js":"9","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Logout.js":"10","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Profile.js":"11","D:\\prohiree-MERN\\prohiree\\client\\src\\lib\\isAuth.js":"12","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\recruiter\\JobApplications.js":"13","D:\\prohiree-MERN\\prohiree\\client\\src\\lib\\MessagePopup.js":"14","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\recruiter\\AcceptedApplicants.js":"15","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Footer\\Footer.js":"16","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\recruiter\\Profile.js":"17","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Welcome\\Welcome.js":"18","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\recruiter\\MyJobs.js":"19","D:\\prohiree-MERN\\prohiree\\client\\src\\lib\\apiList.js":"20","D:\\prohiree-MERN\\prohiree\\client\\src\\lib\\PasswordInput.js":"21","D:\\prohiree-MERN\\prohiree\\client\\src\\lib\\EmailInput.js":"22","D:\\prohiree-MERN\\prohiree\\client\\src\\lib\\FileUploadInput.js":"23","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Welcome\\pager.js":"24"},{"size":466,"mtime":1640064037414,"results":"25","hashOfConfig":"26"},{"size":375,"mtime":1640064037445,"results":"27","hashOfConfig":"26"},{"size":3554,"mtime":1640064037383,"results":"28","hashOfConfig":"26"},{"size":2933,"mtime":1640064037398,"results":"29","hashOfConfig":"26"},{"size":23743,"mtime":1640068544660,"results":"30","hashOfConfig":"26"},{"size":22558,"mtime":1640064037383,"results":"31","hashOfConfig":"26"},{"size":7683,"mtime":1640064037383,"results":"32","hashOfConfig":"26"},{"size":8947,"mtime":1640064037398,"results":"33","hashOfConfig":"26"},{"size":5236,"mtime":1640064037398,"results":"34","hashOfConfig":"26"},{"size":509,"mtime":1640064037398,"results":"35","hashOfConfig":"26"},{"size":8844,"mtime":1640064037398,"results":"36","hashOfConfig":"26"},{"size":174,"mtime":1640064037445,"results":"37","hashOfConfig":"26"},{"size":24015,"mtime":1640073666541,"results":"38","hashOfConfig":"26"},{"size":523,"mtime":1640064037429,"results":"39","hashOfConfig":"26"},{"size":25200,"mtime":1640064037398,"results":"40","hashOfConfig":"26"},{"size":3639,"mtime":1640064037383,"results":"41","hashOfConfig":"26"},{"size":5202,"mtime":1640064037398,"results":"42","hashOfConfig":"26"},{"size":30743,"mtime":1640064037398,"results":"43","hashOfConfig":"26"},{"size":26632,"mtime":1640073444833,"results":"44","hashOfConfig":"26"},{"size":487,"mtime":1640064037445,"results":"45","hashOfConfig":"26"},{"size":1724,"mtime":1640064037429,"results":"46","hashOfConfig":"26"},{"size":1210,"mtime":1640064037414,"results":"47","hashOfConfig":"26"},{"size":7426,"mtime":1640064037414,"results":"48","hashOfConfig":"26"},{"size":1308,"mtime":1640064037398,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1i7h8bz",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"52"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"52"},"D:\\prohiree-MERN\\prohiree\\client\\src\\index.js",[],["115","116"],"D:\\prohiree-MERN\\prohiree\\client\\src\\reportWebVitals.js",[],"D:\\prohiree-MERN\\prohiree\\client\\src\\App.js",["117","118"],"import { createContext, useState } from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport { Grid, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Welcome, { ErrorPage } from \"./component/Welcome/Welcome\";\r\nimport Navbar from \"./component/Navbar\";\r\nimport Login from \"./component/Login\";\r\nimport Logout from \"./component/Logout\";\r\nimport Signup from \"./component/Signup\";\r\nimport Home from \"./component/Home\";\r\nimport Applications from \"./component/Applications\";\r\nimport Profile from \"./component/Profile\";\r\nimport CreateJobs from \"./component/recruiter/CreateJobs\";\r\nimport MyJobs from \"./component/recruiter/MyJobs\";\r\nimport JobApplications from \"./component/recruiter/JobApplications\";\r\nimport AcceptedApplicants from \"./component/recruiter/AcceptedApplicants\";\r\nimport RecruiterProfile from \"./component/recruiter/Profile\";\r\nimport MessagePopup from \"./lib/MessagePopup\";\r\nimport Footer from \"./component/Footer/Footer\";\r\nimport isAuth, { userType } from \"./lib/isAuth\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  \r\n  body: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    minHeight: \"98vh\",\r\n    paddingTop: \"64px\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n}));\r\nexport const SetPopupContext = createContext();\r\n\r\n\r\nfunction App(props) {\r\n  const classes = useStyles();\r\n  const [popup, setPopup] = useState({\r\n    open: false,\r\n    severity: \"\",\r\n    message: \"\",\r\n  });\r\n  \r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <SetPopupContext.Provider value={setPopup}>\r\n        <Grid container direction=\"column\">\r\n          <Grid item xs>\r\n            <Navbar />\r\n          </Grid>\r\n          {/* <Grid item className={classes.body}> */}\r\n            <Switch>\r\n              <Route exact path=\"/\">\r\n                <Welcome />\r\n              </Route>\r\n              <Route exact path=\"/login\">\r\n                <Login />\r\n              </Route>\r\n              <Route exact path=\"/signup\">\r\n                <Signup />\r\n              </Route>\r\n              <Route exact path=\"/logout\">\r\n                <Logout />\r\n              </Route>\r\n              <Route exact path=\"/home\">\r\n                <Home />\r\n              </Route>\r\n              <Route exact path=\"/applications\">\r\n                <Applications />\r\n              </Route>\r\n              <Route exact path=\"/profile\">\r\n                {userType() === \"recruiter\" ? (\r\n                  <RecruiterProfile />\r\n                ) : (\r\n                  <Profile />\r\n                )}\r\n              </Route>\r\n              <Route exact path=\"/addjob\">\r\n                <CreateJobs />\r\n              </Route>\r\n              <Route exact path=\"/myjobs\">\r\n                <MyJobs />\r\n              </Route>\r\n              <Route exact path=\"/job/applications/:jobId\">\r\n                <JobApplications />\r\n              </Route>\r\n              <Route exact path=\"/employees\">\r\n                <AcceptedApplicants />\r\n              </Route>\r\n              <Route>\r\n                <ErrorPage />\r\n              </Route>\r\n            </Switch>\r\n           <Footer />\r\n          </Grid>\r\n        {/* </Grid> */}\r\n        <MessagePopup\r\n          open={popup.open}\r\n          setOpen={(status) =>\r\n            setPopup({\r\n              ...popup,\r\n              open: status,\r\n            })\r\n          }\r\n          severity={popup.severity}\r\n          message={popup.message}\r\n        />\r\n      </SetPopupContext.Provider>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Navbar.js",["119"],"import {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Button,\r\n  makeStyles,\r\n  Box\r\n} from \"@material-ui/core\";\r\nimport { useHistory , Link} from \"react-router-dom\";\r\n\r\nimport isAuth, { userType } from \"../lib/isAuth\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  color:{\r\n    backgroundColor:\"#4169e1\"\r\n   },\r\n   textclr:{\r\n     color: \"#ffff\",\r\n     textDecoration:\"none\",\r\n     \"&:hover\": {\r\n       color:\"#ffff\",\r\n       textDecoration:\"none\",\r\n     }\r\n   }\r\n}));\r\n\r\nconst Navbar = (props) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n\r\n  const handleClick = (location) => {\r\n    console.log(location);\r\n    history.push(location);\r\n  };\r\n  return (\r\n    <AppBar position=\"fixed\" className={classes.text_color} >\r\n      <Toolbar>\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n        <Link to=\"/\" className={classes.textclr} >Job Portal</Link> \r\n        </Typography>\r\n        {isAuth() ? (\r\n          userType() === \"recruiter\" ? (\r\n            <>\r\n              <Button color=\"inherit\" onClick={() => handleClick(\"/home\")}>\r\n                Home\r\n              </Button>\r\n              <Button color=\"inherit\" onClick={() => handleClick(\"/addjob\")}>\r\n                Add Jobs\r\n              </Button>\r\n              <Button color=\"inherit\" onClick={() => handleClick(\"/myjobs\")}>\r\n                My Jobs\r\n              </Button>\r\n              <Button color=\"inherit\" onClick={() => handleClick(\"/employees\")}>\r\n                Employees\r\n              </Button>\r\n              <Button color=\"inherit\" onClick={() => handleClick(\"/profile\")}>\r\n                Profile\r\n              </Button>\r\n              <Button color=\"inherit\" onClick={() => handleClick(\"/logout\")}>\r\n                Logout\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Button color=\"inherit\" onClick={() => handleClick(\"/home\")}>\r\n                Home\r\n              </Button>\r\n              <Button\r\n                color=\"inherit\"\r\n                onClick={() => handleClick(\"/applications\")}\r\n              >\r\n                Applications\r\n              </Button>\r\n              <Button color=\"inherit\" onClick={() => handleClick(\"/profile\")}>\r\n                Profile\r\n              </Button>\r\n              <Button color=\"inherit\" onClick={() => handleClick(\"/logout\")}>\r\n                Logout\r\n              </Button>\r\n            </>\r\n          )\r\n        ) : (\r\n          <>\r\n            <Button color=\"inherit\" onClick={() => handleClick(\"/login\")}>\r\n              Login\r\n            </Button>\r\n            <Button color=\"inherit\" onClick={() => handleClick(\"/signup\")}>\r\n              Signup\r\n            </Button>\r\n            \r\n          </>\r\n        )}\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Signup.js",["120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144"],"import { useState, useContext } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport ReCAPTCHA from \"react-google-recaptcha\"\r\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  makeStyles,\r\n  Paper,\r\n  MenuItem,\r\n  Input,\r\n  InputAdornment,\r\n  FormControl,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\"\r\nimport { toast } from 'react-toastify';\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/material.css\";\r\n\r\nimport PasswordInput from \"../lib/PasswordInput\";\r\nimport EmailInput from \"../lib/EmailInput\";\r\nimport FileUploadInput from \"../lib/FileUploadInput\";\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\nimport isAuth from \"../lib/isAuth\";\r\nimport { Flag, Search } from \"@material-ui/icons\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    padding: \"60px 60px\",\r\n  },\r\n  inputBox: {\r\n    width: \"400px\",\r\n  },\r\n  submitButton: {\r\n    width: \"400px\",\r\n  },\r\n  inputIcon:{\r\n  margin: 0,\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  right:\"0px\",\r\n  transform: \"translate(-50%,-50%)\",\r\n  }\r\n}));\r\n\r\nconst MultifieldInput = (props) => {\r\n  const classes = useStyles();\r\n  const { education, setEducation } = props;\r\n\r\n  return (\r\n    <>\r\n      {education.map((obj, key) => (\r\n        <Grid\r\n          item\r\n          container\r\n          className={classes.inputBox}\r\n          key={key}\r\n          style={{ paddingLeft: 0, paddingRight: 0 }}\r\n        >\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              label={`Institution Name #${key + 1}`}\r\n              value={education[key].institutionName}\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].institutionName = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n              variant=\"outlined\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <TextField\r\n              label=\"Start Year\"\r\n              value={obj.startYear}\r\n              variant=\"outlined\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].startYear = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <TextField\r\n              label=\"End Year\"\r\n              value={obj.endYear}\r\n              variant=\"outlined\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].endYear = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      ))}\r\n      <Grid item>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={() =>\r\n            setEducation([\r\n              ...education,\r\n              {\r\n                institutionName: \"\",\r\n                startYear: \"\",\r\n                endYear: \"\",\r\n              },\r\n            ])\r\n          }\r\n          className={classes.inputBox}\r\n        >\r\n          Add another institution details\r\n        </Button>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Login = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [otp, setotp] = useState(\"\")\r\n  const [code, setCode] = useState('')\r\n  const [loggedin, setLoggedin] = useState(isAuth());\r\n\r\n  const [signupDetails, setSignupDetails] = useState({\r\n    type: \"applicant\",\r\n    email: \"\",\r\n    password: \"\",\r\n    // cpassword:\"\",\r\n    name: \"\",\r\n    // education: [],\r\n    // skills: [],\r\n    // resume: \"\",\r\n    // profile: \"\",\r\n    // bio: \"\",\r\n    contactNumber: \"\"\r\n    \r\n  });\r\n\r\n  const [phone, setPhone] = useState(\"\");\r\n\r\n  const [education, setEducation] = useState([\r\n    {\r\n      institutionName: \"\",\r\n      startYear: \"\",\r\n      endYear: \"\",\r\n    },\r\n  ]);\r\n\r\n  const [inputErrorHandler, setInputErrorHandler] = useState({\r\n    email: {\r\n      untouched: true,\r\n      required: true,\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n    password: {\r\n      untouched: true,\r\n      required: true,\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n    // cpassword: {\r\n    //   untouched: true,\r\n    //   required: true,\r\n    //   error: false,\r\n    //   message: \"\",\r\n    // },\r\n    name: {\r\n      untouched: true,\r\n      required: true,\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n  });\r\n\r\n  const handleInput = (key, value) => {\r\n    setSignupDetails({\r\n      ...signupDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleInputError = (key, status, message) => {\r\n    setInputErrorHandler({\r\n      ...inputErrorHandler,\r\n      [key]: {\r\n        required: true,\r\n        untouched: false,\r\n        error: status,\r\n        message: message,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    const tmpErrorHandler = {};\r\n    Object.keys(inputErrorHandler).forEach((obj) => {\r\n      if (inputErrorHandler[obj].required && inputErrorHandler[obj].untouched) {\r\n        tmpErrorHandler[obj] = {\r\n          required: true,\r\n          untouched: false,\r\n          error: true,\r\n          message: `${obj[0].toUpperCase() + obj.substr(1)} is required`,\r\n        };\r\n      } else {\r\n        tmpErrorHandler[obj] = inputErrorHandler[obj];\r\n      }\r\n    });\r\n\r\n    let updatedDetails = {\r\n      ...signupDetails,\r\n      // education: education\r\n      //   .filter((obj) => obj.institutionName.trim() !== \"\")\r\n      //   .map((obj) => {\r\n      //     if (obj[\"endYear\"] === \"\") {\r\n      //       delete obj[\"endYear\"];\r\n      //     }\r\n      //     return obj;\r\n      //   }),  \r\n    };\r\n    if (phone !== \"\") {\r\n      updatedDetails = {\r\n        ...signupDetails,\r\n        contactNumber: `+${phone}`,\r\n      };\r\n    } else {\r\n      updatedDetails = {\r\n        ...signupDetails,\r\n        contactNumber: \"\",\r\n      };\r\n    }\r\n    setSignupDetails(updatedDetails);\r\n\r\n    const verified = !Object.keys(tmpErrorHandler).some((obj) => {\r\n      return tmpErrorHandler[obj].error;\r\n    });\r\n\r\n    if (verified) {\r\n      axios\r\n        .post(apiList.signup, updatedDetails)\r\n        .then((response) => {\r\n          localStorage.setItem(\"token\", response.data.token);\r\n          localStorage.setItem(\"type\", response.data.type);\r\n          setLoggedin(isAuth());\r\n          setPopup({\r\n            open: true,\r\n            severity: \"success\",\r\n            message: \"Logged in successfully\",\r\n          });\r\n          console.log(response);\r\n        })\r\n        .catch((err) => {\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: err.response.data.err,\r\n          });\r\n          console.log(err.response);\r\n        });\r\n    } else {\r\n      setInputErrorHandler(tmpErrorHandler);\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"Incorrect Input\",\r\n      });\r\n    }\r\n  };\r\n  // const[recaptcha , setRecaptcha] = useState(false);\r\n\r\n  // const handleonRecaptcha = (value) => {\r\n  //   // console.log(\"Captcha Value:\", value);\r\n  //   setRecaptcha(!recaptcha)\r\n  // }\r\n\r\n  const handleLoginRecruiter = () => {\r\n    const tmpErrorHandler = {};\r\n    Object.keys(inputErrorHandler).forEach((obj) => {\r\n      if (inputErrorHandler[obj].required && inputErrorHandler[obj].untouched) {\r\n        tmpErrorHandler[obj] = {\r\n          required: true,\r\n          untouched: false,\r\n          error: true,\r\n          message: `${obj[0].toUpperCase() + obj.substr(1)} is required`,\r\n        };\r\n      } else {\r\n        tmpErrorHandler[obj] = inputErrorHandler[obj];\r\n      }\r\n    });\r\n\r\n    let updatedDetails = {\r\n      ...signupDetails,\r\n    };\r\n    if (phone !== \"\") {\r\n      updatedDetails = {\r\n        ...signupDetails,\r\n        contactNumber: `+${phone}`,\r\n      };\r\n    } else {\r\n      updatedDetails = {\r\n        ...signupDetails,\r\n        contactNumber: \"\",\r\n      };\r\n    }\r\n\r\n    setSignupDetails(updatedDetails);\r\n\r\n    const verified = !Object.keys(tmpErrorHandler).some((obj) => {\r\n      return tmpErrorHandler[obj].error;\r\n    });\r\n\r\nconsole.log(updatedDetails)\r\n\r\n    if (verified) {\r\n      axios\r\n        .post(apiList.signup, updatedDetails)\r\n        .then((response) => {\r\n          localStorage.setItem(\"token\", response.data.token);\r\n          localStorage.setItem(\"type\", response.data.type);\r\n          setLoggedin(isAuth());\r\n          setPopup({\r\n            open: true,\r\n            severity: \"success\",\r\n            message: \"Logged in successfully\",\r\n          });\r\n          console.log(response);\r\n        })\r\n        .catch((err) => {\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: err.response.data.message,\r\n          });\r\n          console.log(err.response);\r\n        });\r\n    } else {\r\n      setInputErrorHandler(tmpErrorHandler);\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"Incorrect Input\",\r\n      });\r\n    }\r\n  };\r\n\r\n   // for setting the phone number \r\n\r\n\r\nuseEffect(() => {\r\n    setCode(otp)\r\n}, [otp])\r\n\r\nconst [verify,setVerify] = useState(true)\r\n\r\n   // sending otp to the client number\r\n   const sendOTP = () => {\r\n     console.log(phone)\r\n    fetch(`http://localhost:4444/api/sendotp?phonenumber=${phone}&channel=sms`,\r\n        {\r\n            method: \"get\",\r\n\r\n        }).then(res => res.json())\r\n        .then(data => {\r\n          console.log(data)\r\n            if (data.error) {\r\n                console.log(data.message)\r\n\r\n            } else {\r\n                // setResult(data.myposts)\r\n                console.log(data.message)\r\n                \r\n                // console.log(data)\r\n            }\r\n        })\r\n}\r\n\r\n\r\n    // verifing the otp and the client number\r\n\r\n\r\n    const validateOTP = () => {\r\n      // console.log(code)\r\n      // console.log(phonenumber)\r\n      fetch(`http://localhost:4444/api/verifyotp?phonenumber=${phone}&code=${code}`,\r\n          {\r\n              method: \"get\",\r\n\r\n          }).then(res => res.json())\r\n          .then(data => {\r\n              if (data.error) {\r\n                  // console.log(`The given ${data.phonenumber} is ${data.message} `)\r\n                      toast.error(data.error)\r\n                      console.log(data.error)\r\n\r\n              } else {\r\n                  console.log(`The given ${phone} is ${data.message} `)\r\n                  toast.success(data.message)\r\n                  setVerify(!verify)\r\n              }\r\n             \r\n          })\r\n        \r\n          \r\n  }\r\n\r\nconst history = useHistory();\r\n\r\n// google auth logic\r\nconst [showloginButton, setShowloginButton] = useState(true);\r\n// const clientId = \"71363042296-4kqs7oqffuojql8r5j5jhn36ugm4jo2b.apps.googleusercontent.com\";\r\nconst [showlogoutButton, setShowlogoutButton] = useState(false);\r\nconst onLoginSuccess = (res) => {\r\n    console.log('Login Success:', res.profileObj);\r\n    setShowloginButton(!showloginButton);\r\n    setShowlogoutButton(true);\r\n    // history.push(\"/applications\")\r\n};\r\nconst onLoginFailure = (res) => {\r\n    console.log('Login Failed:', res);\r\n};\r\nconst onSignoutSuccess = () => {\r\n    alert(\"You have been logged out successfully\");\r\n    console.clear();\r\n    setShowloginButton(true);\r\n    setShowlogoutButton(false);\r\n};\r\n\r\n  return loggedin ? (\r\n    <Redirect to=\"/\" />\r\n  ) : (\r\n    <Paper elevation={3} className={classes.body}>\r\n      <Grid container \r\n       xs ={5}\r\n     direction=\"column\" \r\n     spacing={5} \r\n     alignItems=\"center\" \r\n     justify = 'center' \r\n      style={{\r\n        margin:\"70px auto 50px auto\",\r\n        padding:\"20px\",\r\n        boxShadow: \"0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22)\"\r\n    }}>\r\n        <Grid item>\r\n          <Typography variant=\"h3\" component=\"h2\">\r\n            Signup\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <TextField\r\n            select\r\n            label=\"Category\"\r\n            variant=\"outlined\"\r\n            className={classes.inputBox}\r\n            value={signupDetails.type}\r\n            onChange={(event) => {\r\n              handleInput(\"type\", event.target.value);\r\n            }}\r\n          >\r\n            <MenuItem value=\"applicant\">Student</MenuItem>\r\n            <MenuItem value=\"recruiter\">Recruiter</MenuItem>\r\n          </TextField>\r\n        </Grid>\r\n        <Grid item>\r\n          <TextField\r\n            label=\"Name\"\r\n            value={signupDetails.name}\r\n            onChange={(event) => handleInput(\"name\", event.target.value)}\r\n            className={classes.inputBox}\r\n            error={inputErrorHandler.name.error}\r\n            helperText={inputErrorHandler.name.message}\r\n            onBlur={(event) => {\r\n              if (event.target.value === \"\") {\r\n                handleInputError(\"name\", true, \"Name is required\");\r\n              } else {\r\n                handleInputError(\"name\", false, \"\");\r\n              }\r\n            }}\r\n            variant=\"outlined\"\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <EmailInput\r\n            label=\"Email\"\r\n            value={signupDetails.email}\r\n            onChange={(event) => handleInput(\"email\", event.target.value)}\r\n            inputErrorHandler={inputErrorHandler}\r\n            handleInputError={handleInputError}\r\n            className={classes.inputBox}\r\n            required={true}\r\n          \r\n          />\r\n        </Grid>\r\n        <Grid item style={{position:'relative'}}>\r\n            \r\n             <PhoneInput\r\n              inputStyle={{width:\"400px\"}}\r\n              country={\"in\"}\r\n              value={phone}\r\n              onChange={(phone) => setPhone(phone)}\r\n            />\r\n            \r\n           \r\n              {\r\n                phone.length > 2 ?\r\n                <button  data-toggle=\"modal\" data-target=\"#exampleModalCenter\" type=\"button\" className={`btn btn-primary ${classes.inputIcon}`} onClick={() => sendOTP()}>Verify</button>\r\n                :null\r\n                // <button  type=\"button\" className={`btn btn-primary ${classes.inputIcon}`} >Verified</button>\r\n              }\r\n            </Grid>\r\n              <div class=\"modal fade\" id=\"exampleModalCenter\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\r\n                <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n                  <div class=\"modal-content\">\r\n                    <div class=\"modal-header\">\r\n                      <h5 class=\"modal-title\" id=\"exampleModalLongTitle\">Reset Your Account Password</h5>\r\n                      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                        <span aria-hidden=\"true\">&times;</span>\r\n                      </button>\r\n                    </div>\r\n                        <div class=\"modal-body\">\r\n                        <div class=\"  text-center\">\r\n                        <h6>Please enter the one time password <br /> to verify your account</h6>\r\n                        {/* <div> <span>A code has been sent to</span> <small>*******9897</small> </div> */}\r\n                        <div id=\"otp\" class=\"inputs d-flex flex-row justify-content-center mt-4\">\r\n                            <input type=\"text\" className=\"form-control w-50\" id=\"exampleInputName\"  placeholder=\"Enter OTP\" maxLength=\"6\" onChange={(e) => setotp(e.target.value)}/>\r\n                        </div>\r\n                        <div> <button type='button' class=\"btn btn-danger px-4 validate mt-4\"  aria-label=\"Close\"  data-dismiss=\"modal\" onClick={() =>{ validateOTP()}} >Validate</button> </div>\r\n                    </div>\r\n                    <div class=\"card-2 mt-3\">\r\n                        <div class=\"content d-flex justify-content-center align-items-center\"> <span>Didn't get the code</span> <a href=\"#\" class=\"text-decoration-none ms-3\"> Resend</a> </div>\r\n                    </div>\r\n                     \r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n        <Grid item>\r\n          <PasswordInput\r\n            label=\"Password\"\r\n            value={signupDetails.password}\r\n            onChange={(event) => handleInput(\"password\", event.target.value)}\r\n            className={classes.inputBox}\r\n            error={inputErrorHandler.password.error}\r\n            helperText={inputErrorHandler.password.message}\r\n            onBlur={(event) => {\r\n              if (event.target.value === \"\") {\r\n                handleInputError(\"password\", true, \"Password is required\");\r\n              } else {\r\n                handleInputError(\"password\", false, \"\");\r\n              }\r\n            }}\r\n          />\r\n        </Grid>\r\n        {/* <Grid item>\r\n          <PasswordInput\r\n            labelWidth={props.labelWidth ? props.labelWidth : 130}\r\n            label=\"Confirm Password\"\r\n            value={signupDetails.cpassword}\r\n            onChange={(event) => handleInput(\"cpassword\", event.target.value)}\r\n            className={classes.inputBox}\r\n            error={inputErrorHandler.cpassword.error}\r\n            helperText={inputErrorHandler.cpassword.message}\r\n            onBlur={(event) => {\r\n              if (event.target.value === \"\") {\r\n                handleInputError(\"cpassword\", true, \"Confirm Password is required\");\r\n              }else if(signupDetails.password !== signupDetails.cpassword){\r\n                return handleInputError (\"cpassword\", true, \"password should match\");\r\n              } \r\n              else {\r\n                handleInputError(\"cpassword\", false, \"\");\r\n              }\r\n            }}\r\n            \r\n          />\r\n          \r\n        </Grid> */}\r\n        {signupDetails.type === \"applicant\" ? (\r\n          <>\r\n            {/* <MultifieldInput\r\n              education={education}\r\n              setEducation={setEducation}\r\n            />\r\n            <Grid item>\r\n              <ChipInput\r\n                className={classes.inputBox}\r\n                label=\"Skills\"\r\n                variant=\"outlined\"\r\n                helperText=\"Press enter to add skills\"\r\n                onChange={(chips) =>\r\n                  setSignupDetails({ ...signupDetails, skills: chips })\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <FileUploadInput\r\n                className={classes.inputBox}\r\n                label=\"Resume (.pdf)\"\r\n                icon={<DescriptionIcon />}\r\n                // value={files.resume}\r\n                // onChange={(event) =>\r\n                //   setFiles({\r\n                //     ...files,\r\n                //     resume: event.target.files[0],\r\n                //   })\r\n                // }\r\n                uploadTo={apiList.uploadResume}\r\n                handleInput={handleInput}\r\n                identifier={\"resume\"}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <FileUploadInput\r\n                className={classes.inputBox}\r\n                label=\"Profile Photo (.jpg/.png)\"\r\n                icon={<FaceIcon />}\r\n                // value={files.profileImage}\r\n                // onChange={(event) =>\r\n                //   setFiles({\r\n                //     ...files,\r\n                //     profileImage: event.target.files[0],\r\n                //   })\r\n                // }\r\n                uploadTo={apiList.uploadProfileImage}\r\n                handleInput={handleInput}\r\n                identifier={\"profile\"}\r\n              />\r\n            </Grid> */}\r\n          </>\r\n        ) : (\r\n          <>\r\n            {/* <Grid item style={{ width: \"100%\" }}>\r\n              <TextField\r\n                label=\"Bio (upto 250 words)\"\r\n                multiline\r\n                rows={8}\r\n                style={{ width: \"100%\" }}\r\n                variant=\"outlined\"\r\n                value={signupDetails.bio}\r\n                onChange={(event) => {\r\n                  if (\r\n                    event.target.value.split(\" \").filter(function (n) {\r\n                      return n != \"\";\r\n                    }).length <= 250\r\n                  ) {\r\n                    handleInput(\"bio\", event.target.value);\r\n                  }\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n            <Typography >{\"Please Upload Your Company Logo\"}</Typography >\r\n              <FileUploadInput\r\n                className={classes.inputBox}\r\n                label=\"Profile Photo (.jpg/.png)\"\r\n                icon={<FaceIcon />}\r\n                // value={files.profileImage}\r\n                // onChange={(event) =>\r\n                //   setFiles({\r\n                //     ...files,\r\n                //     profileImage: event.target.files[0],\r\n                //   })\r\n                // }\r\n                uploadTo={apiList.uploadProfileImage}\r\n                handleInput={handleInput}\r\n                identifier={\"profile\"}\r\n              />\r\n            </Grid> */}\r\n          </>\r\n        )}\r\n        {/* <ReCAPTCHA\r\n       sitekey = \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\"\r\n       onChange ={handleonRecaptcha}\r\n       /> */}\r\n       {/* google authentication starts */}\r\n      {/* <Grid item >\r\n        <Button>\r\n            { showloginButton ?\r\n                <GoogleLogin\r\n                    clientId=\"71363042296-4kqs7oqffuojql8r5j5jhn36ugm4jo2b.apps.googleusercontent.com\"\r\n                    buttonText=\"Sign In\"\r\n                    onSuccess={onLoginSuccess}\r\n                    onFailure={onLoginFailure}\r\n                    cookiePolicy={'single_host_origin'}\r\n                    isSignedIn={true}\r\n                /> : null}\r\n            { showlogoutButton ?\r\n                <GoogleLogout\r\n                    clientId=\"71363042296-4kqs7oqffuojql8r5j5jhn36ugm4jo2b.apps.googleusercontent.com\"\r\n                    buttonText=\"Sign Out\"\r\n                    onLogoutSuccess={onSignoutSuccess}\r\n                >\r\n                </GoogleLogout> : null\r\n             }\r\n            </Button>\r\n        </Grid> */}\r\n        {/* google auth ends */}\r\n        <Grid item>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              signupDetails.type === \"applicant\"\r\n                ? handleLogin()\r\n                : handleLoginRecruiter();\r\n            }}\r\n            className={classes.submitButton}\r\n            // disabled={!recaptcha}\r\n          >\r\n            Signup\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n\r\n// {/* <Grid item>\r\n//           <PasswordInput\r\n//             label=\"Re-enter Password\"\r\n//             value={signupDetails.tmpPassword}\r\n//             onChange={(event) => handleInput(\"tmpPassword\", event.target.value)}\r\n//             className={classes.inputBox}\r\n//             labelWidth={140}\r\n//             helperText={inputErrorHandler.tmpPassword.message}\r\n//             error={inputErrorHandler.tmpPassword.error}\r\n//             onBlur={(event) => {\r\n//               if (event.target.value !== signupDetails.password) {\r\n//                 handleInputError(\r\n//                   \"tmpPassword\",\r\n//                   true,\r\n//                   \"Passwords are not same.\"\r\n//                 );\r\n//               }\r\n//             }}\r\n//           />\r\n//         </Grid> */}\r\n","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Home.js",["145","146","147","148","149"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n  Avatar\r\n} from \"@material-ui/core\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport axios from \"axios\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\nimport { userType } from \"../lib/isAuth\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  button: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(17),\r\n    height: theme.spacing(17),\r\n  },\r\n}));\r\n\r\nconst JobTile = (props) => {\r\n  const classes = useStyles();\r\n  const { job } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [sop, setSop] = useState(\"\");\r\n  const [isReadMore, setIsReadMore] = useState(true);\r\n  const toggleReadMore = () => {\r\n    setIsReadMore(!isReadMore);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setSop(\"\");\r\n  };\r\n\r\n  const handleApply = () => {\r\n    console.log(job._id);\r\n    console.log(sop);\r\n    axios\r\n      .post(\r\n        `${apiList.jobs}/${job._id}/applications`,\r\n        {\r\n          sop: sop,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        handleClose();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        handleClose();\r\n      });\r\n  };\r\n\r\n  const deadline = new Date(job.deadline).toLocaleDateString();\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Grid container>\r\n      <Grid container item xs={2} spacing={5} direction=\"column\">\r\n      <Grid item>\r\n        <Avatar\r\n            src={job.recruiter.profile}\r\n            className={classes.avatar}\r\n          />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container item xs={8} spacing={1} direction=\"column\">\r\n        \r\n          <Grid item>\r\n            <Typography variant=\"h5\">{job.title}</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\r\n          </Grid>\r\n          <Grid item>Role : {job.jobType}</Grid>\r\n          <Grid item>Salary : &#8377; {job.salary} per month</Grid>\r\n          <Grid item>Description: {isReadMore ? job.description?.slice(0, 5) : job.description}\r\n      <span onClick={toggleReadMore} className=\"read-or-hide\">\r\n        {isReadMore ? <a>...read more</a> : <a>...show less</a>}\r\n      </span> </Grid>\r\n          <Grid item>\r\n            Duration :{\" \"}\r\n            {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\r\n          </Grid>\r\n          <Grid item>Posted By : {job.recruiter.name}</Grid>\r\n          <Grid item>Application Deadline : {deadline}</Grid>\r\n\r\n          <Grid item>\r\n            {job.skillsets.map((skill) => (\r\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={2} spacing={2} style={{ margin: \"auto 0px\" }}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            onClick={() => {\r\n              setOpen(true);\r\n            }}\r\n            disabled={userType() === \"recruiter\"}\r\n          >\r\n            Apply\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"50%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <TextField\r\n            label=\"Write SOP (upto 250 words)\"\r\n            multiline\r\n            rows={8}\r\n            style={{ width: \"100%\", marginBottom: \"30px\" }}\r\n            variant=\"outlined\"\r\n            value={sop}\r\n            onChange={(event) => {\r\n              if (\r\n                event.target.value.split(\" \").filter(function (n) {\r\n                  return n !== \"\";\r\n                }).length <= 250\r\n              ) {\r\n                setSop(event.target.value);\r\n              }\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            onClick={() => handleApply()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Job Type\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={9}\r\n              justify=\"space-around\"\r\n              // alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"fullTime\"\r\n                      checked={searchOptions.jobType.fullTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Full Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"partTime\"\r\n                      checked={searchOptions.jobType.partTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Part Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"wfh\"\r\n                      checked={searchOptions.jobType.wfh}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Work From Home\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Salary\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <Slider\r\n                valueLabelDisplay=\"auto\"\r\n                valueLabelFormat={(value) => {\r\n                  return value * (100000 / 100);\r\n                }}\r\n                marks={[\r\n                  { value: 0, label: \"0\" },\r\n                  { value: 100, label: \"100000\" },\r\n                ]}\r\n                value={searchOptions.salary}\r\n                onChange={(event, value) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    salary: value,\r\n                  })\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Duration\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <TextField\r\n                select\r\n                label=\"Duration\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={searchOptions.duration}\r\n                onChange={(event) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    duration: event.target.value,\r\n                  })\r\n                }\r\n              >\r\n                <MenuItem value=\"0\">All</MenuItem>\r\n                <MenuItem value=\"1\">1</MenuItem>\r\n                <MenuItem value=\"2\">2</MenuItem>\r\n                <MenuItem value=\"3\">3</MenuItem>\r\n                <MenuItem value=\"4\">4</MenuItem>\r\n                <MenuItem value=\"5\">5</MenuItem>\r\n                <MenuItem value=\"6\">6</MenuItem>\r\n                <MenuItem value=\"7\">7</MenuItem>\r\n              </TextField>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"salary\"\r\n                    checked={searchOptions.sort.salary.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"salary\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"salary\">\r\n                    <Typography>Salary</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.salary.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            desc: !searchOptions.sort.salary.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.salary.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"duration\"\r\n                    checked={searchOptions.sort.duration.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"duration\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"duration\">\r\n                    <Typography>Duration</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.duration.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            desc: !searchOptions.sort.duration.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.duration.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort.rating.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.rating.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            desc: !searchOptions.sort.rating.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.rating.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst Home = (props) => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    query: \"\",\r\n    jobType: {\r\n      fullTime: false,\r\n      partTime: false,\r\n      wfh: false,\r\n    },\r\n    salary: [0, 100],\r\n    duration: \"0\",\r\n    sort: {\r\n      salary: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      duration: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      rating: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  const setPopup = useContext(SetPopupContext);\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [];\r\n    if (searchOptions.query !== \"\") {\r\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\r\n    }\r\n    if (searchOptions.jobType.fullTime) {\r\n      searchParams = [...searchParams, `jobType=Full%20Time`];\r\n    }\r\n    if (searchOptions.jobType.partTime) {\r\n      searchParams = [...searchParams, `jobType=Part%20Time`];\r\n    }\r\n    if (searchOptions.jobType.wfh) {\r\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\r\n    }\r\n    if (searchOptions.salary[0] !== 0) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.salary[1] !== 100) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.duration !== \"0\") {\r\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\r\n    }\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = apiList.jobs;\r\n    if (queryString !== \"\") {\r\n      address = `${address}?${queryString}`;\r\n    }\r\n    // console.log(localStorage.getItem(\"token\"))\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        // console.log(response.data);\r\n        setJobs(\r\n          response.data.filter((obj) => {\r\n            const today = new Date();\r\n            const deadline = new Date(obj.deadline);\r\n            return deadline > today;\r\n          })\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px 200px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid item xs>\r\n            <Typography variant=\"h2\">Jobs</Typography>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <TextField\r\n              label=\"Search Jobs\"\r\n              value={searchOptions.query}\r\n              onChange={(event) =>\r\n                setSearchOptions({\r\n                  ...searchOptions,\r\n                  query: event.target.value,\r\n                })\r\n              }\r\n              onKeyPress={(ev) => {\r\n                if (ev.key === \"Enter\") {\r\n                  getData();\r\n                }\r\n              }}\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment>\r\n                    <IconButton onClick={() => getData()}>\r\n                      <SearchIcon />\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              style={{ width: \"500px\" }}\r\n              variant=\"outlined\"\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <IconButton onClick={() => setFilterOpen(true)}>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid\r\n          container\r\n          item\r\n          xs\r\n          direction=\"column\"\r\n          alignItems=\"stretch\"\r\n          justify=\"center\"\r\n        >\r\n          {jobs.length > 0 ? (\r\n            jobs.map((job) => {\r\n              return <JobTile job={job} />;\r\n            })\r\n          ) : (\r\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\r\n              No jobs found\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n        {/* <Grid item>\r\n          <Pagination count={10} color=\"primary\" />\r\n        </Grid> */}\r\n      </Grid>\r\n      <FilterPopup\r\n        open={filterOpen}\r\n        searchOptions={searchOptions}\r\n        setSearchOptions={setSearchOptions}\r\n        handleClose={() => setFilterOpen(false)}\r\n        getData={() => {\r\n          getData();\r\n          setFilterOpen(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Applications.js",["150","151","152","153","154","155","156","157","158"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport axios from \"axios\";\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  statusBlock: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\n\r\nconst ApplicationTile = (props) => {\r\n  const classes = useStyles();\r\n  const { application } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [open, setOpen] = useState(false);\r\n  const [rating, setRating] = useState(application.job.rating);\r\n\r\n  const appliedOn = new Date(application.dateOfApplication);\r\n  const joinedOn = new Date(application.dateOfJoining);\r\n\r\n  const fetchRating = () => {\r\n    axios\r\n      .get(`${apiList.rating}?id=${application.job._id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setRating(response.data.rating);\r\n        console.log(response.data);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const changeRating = () => {\r\n    axios\r\n      .put(\r\n        apiList.rating,\r\n        { rating: rating, jobId: application.job._id },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: \"Rating updated successfully\",\r\n        });\r\n        fetchRating();\r\n        setOpen(false);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        fetchRating();\r\n        setOpen(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const colorSet = {\r\n    applied: \"#3454D1\",\r\n    shortlisted: \"#DC851F\",\r\n    accepted: \"#09BC8A\",\r\n    rejected: \"#D1345B\",\r\n    deleted: \"#B49A67\",\r\n    cancelled: \"#F44336\",\r\n    finished: \"#4EA5D9\",\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Grid container>\r\n        <Grid container item xs={9} spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            <Typography variant=\"h5\">{application.job.title}</Typography>\r\n          </Grid>\r\n          <Grid item>Posted By: {application.recruiter.name}</Grid>\r\n          <Grid item>Role : {application.job.jobType}</Grid>\r\n          <Grid item>Salary : &#8377; {application.job.salary} per month</Grid>\r\n          <Grid item>\r\n            Duration :{\" \"}\r\n            {application.job.duration !== 0\r\n              ? `${application.job.duration} month`\r\n              : `Flexible`}\r\n          </Grid>\r\n          <Grid item>\r\n            {application.job.skillsets.map((skill) => (\r\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n            ))}\r\n          </Grid>\r\n          <Grid item>Applied On: {appliedOn.toLocaleDateString()}</Grid>\r\n          {application.status === \"accepted\" ||\r\n          application.status === \"finished\" ? (\r\n            <Grid item>Joined On: {joinedOn.toLocaleDateString()}</Grid>\r\n          ) : null}\r\n        </Grid>\r\n        <Grid item container direction=\"column\" xs={3} spacing={2} style={{ margin: \"auto 0px\" }}>\r\n          <Grid item >\r\n            \r\n            <Button\r\n              className={classes.statusBlock}\r\n              style={{\r\n                background: colorSet[application.status],\r\n                color: \"#ffffff\",\r\n              }}\r\n            >\r\n              {application.status}\r\n            </Button>\r\n          </Grid>\r\n          {application.status === \"accepted\" ||\r\n          application.status === \"finished\" ? (\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.statusBlock}\r\n                onClick={() => {\r\n                  fetchRating();\r\n                  setOpen(true);\r\n                }}\r\n              >\r\n                Rate Job\r\n              </Button>\r\n            </Grid>\r\n          ) : null}\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Rating\r\n            name=\"simple-controlled\"\r\n            style={{ marginBottom: \"30px\" }}\r\n            value={rating === -1 ? null : rating}\r\n            onChange={(event, newValue) => {\r\n              setRating(newValue);\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            onClick={() => changeRating()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst Applications = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [applications, setApplications] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(apiList.applications, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setApplications(response.data);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      item\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n    >\r\n      <Grid item>\r\n        <Typography variant=\"h2\">Applications</Typography>\r\n      </Grid>\r\n      <Grid\r\n        container\r\n        item\r\n        xs\r\n        direction=\"column\"\r\n        style={{ width: \"100%\" }}\r\n        alignItems=\"stretch\"\r\n        justify=\"center\"\r\n      >\r\n        {applications.length > 0 ? (\r\n          applications.map((obj) => (\r\n            <Grid item>\r\n              <ApplicationTile application={obj} />\r\n            </Grid>\r\n          ))\r\n        ) : (\r\n          <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\r\n            No Applications Found\r\n          </Typography>\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Applications;\r\n","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\recruiter\\CreateJobs.js",["159","160"],"import { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  Modal,\r\n  Paper,\r\n  makeStyles,\r\n  TextField,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    // padding: \"30px\",\r\n  },\r\n}));\r\n\r\nconst CreateJobs = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [jobDetails, setJobDetails] = useState({\r\n    title: \"\",\r\n    maxApplicants: 100,\r\n    maxPositions: 30,\r\n    deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\r\n      .toISOString()\r\n      .substr(0, 16),\r\n    skillsets: [],\r\n    jobType: \"Full Time\",\r\n    duration: 0,\r\n    description:\"\",\r\n    salary: 0,\r\n  });\r\n\r\n  const handleInput = (key, value) => {\r\n    setJobDetails({\r\n      ...jobDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    console.log(jobDetails);\r\n    axios\r\n      .post(apiList.jobs, jobDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        setJobDetails({\r\n          title: \"\",\r\n          maxApplicants: 100,\r\n          maxPositions: 30,\r\n          deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\r\n            .toISOString()\r\n            .substr(0, 16),\r\n          skillsets: [],\r\n          jobType: \"Full Time\",\r\n          description:\"\",\r\n          duration: 0,\r\n          salary: 0,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\", width: \"\" }}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h2\">Add Job</Typography>\r\n        </Grid>\r\n        <Grid item container xs direction=\"column\" justify=\"center\">\r\n          <Grid item>\r\n            <Paper\r\n              style={{\r\n                padding: \"20px\",\r\n                outline: \"none\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <Grid\r\n                container\r\n                direction=\"column\"\r\n                alignItems=\"stretch\"\r\n                spacing={3}\r\n              >\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Title\"\r\n                    value={jobDetails.title}\r\n                    onChange={(event) =>\r\n                      handleInput(\"title\", event.target.value)\r\n                    }\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <ChipInput\r\n                    className={classes.inputBox}\r\n                    label=\"Skills\"\r\n                    variant=\"outlined\"\r\n                    helperText=\"Press enter to add skills\"\r\n                    value={jobDetails.skillsets}\r\n                    onAdd={(chip) =>\r\n                      setJobDetails({\r\n                        ...jobDetails,\r\n                        skillsets: [...jobDetails.skillsets, chip],\r\n                      })\r\n                    }\r\n                    onDelete={(chip, index) => {\r\n                      let skillsets = jobDetails.skillsets;\r\n                      skillsets.splice(index, 1);\r\n                      setJobDetails({\r\n                        ...jobDetails,\r\n                        skillsets: skillsets,\r\n                      });\r\n                    }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                {/* Job Desc */}\r\n                <Grid item style={{ width: \"100%\" }}>\r\n              <TextField\r\n                label=\"Description\"\r\n                multiline\r\n                rows={8}\r\n                style={{ width: \"100%\" }}\r\n                variant=\"outlined\"\r\n                value={jobDetails.Description}\r\n                onChange={(event) =>\r\n                  handleInput(\"description\", event.target.value)\r\n                }\r\n              />\r\n            </Grid>\r\n\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    label=\"Job Type\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.jobType}\r\n                    onChange={(event) => {\r\n                      handleInput(\"jobType\", event.target.value);\r\n                    }}\r\n                    fullWidth\r\n                  >\r\n                    <MenuItem value=\"Full Time\">Full Time</MenuItem>\r\n                    <MenuItem value=\"Part Time\">Part Time</MenuItem>\r\n                    <MenuItem value=\"Work From Home\">Work From Home</MenuItem>\r\n                  </TextField>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    label=\"Duration\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.duration}\r\n                    onChange={(event) => {\r\n                      handleInput(\"duration\", event.target.value);\r\n                    }}\r\n                    fullWidth\r\n                  >\r\n                    <MenuItem value={0}>Flexible</MenuItem>\r\n                    <MenuItem value={1}>1 Month</MenuItem>\r\n                    <MenuItem value={2}>2 Months</MenuItem>\r\n                    <MenuItem value={3}>3 Months</MenuItem>\r\n                    <MenuItem value={4}>4 Months</MenuItem>\r\n                    <MenuItem value={5}>5 Months</MenuItem>\r\n                    <MenuItem value={6}>6 Months</MenuItem>\r\n                  </TextField>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Salary\"\r\n                    type=\"number\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.salary}\r\n                    onChange={(event) => {\r\n                      handleInput(\"salary\", event.target.value);\r\n                    }}\r\n                    InputProps={{ inputProps: { min: 0 } }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Application Deadline\"\r\n                    type=\"datetime-local\"\r\n                    value={jobDetails.deadline}\r\n                    onChange={(event) => {\r\n                      handleInput(\"deadline\", event.target.value);\r\n                    }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Maximum Number Of Applicants\"\r\n                    type=\"number\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.maxApplicants}\r\n                    onChange={(event) => {\r\n                      handleInput(\"maxApplicants\", event.target.value);\r\n                    }}\r\n                    InputProps={{ inputProps: { min: 1 } }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Positions Available\"\r\n                    type=\"number\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.maxPositions}\r\n                    onChange={(event) => {\r\n                      handleInput(\"maxPositions\", event.target.value);\r\n                    }}\r\n                    InputProps={{ inputProps: { min: 1 } }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\r\n                onClick={() => handleUpdate()}\r\n              >\r\n                Create Job\r\n              </Button>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateJobs;\r\n","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Login.js",["161","162","163"],"import { useContext, useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  makeStyles,\r\n  Paper,\r\n  Link,\r\n  Modal,\r\n  Box\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport PasswordInput from \"../lib/PasswordInput\";\r\nimport EmailInput from \"../lib/EmailInput\";\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\nimport isAuth from \"../lib/isAuth\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    padding: \"60px 60px\",\r\n  },\r\n  inputBox: {\r\n    width: \"300px\",\r\n  },\r\n  submitButton: {\r\n    width: \"300px\",\r\n  },\r\n}));\r\n\r\nconst Login = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [loggedin, setLoggedin] = useState(isAuth());\r\n\r\n  const [loginDetails, setLoginDetails] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const [inputErrorHandler, setInputErrorHandler] = useState({\r\n    email: {\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n    password: {\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n  });\r\n\r\n\r\n\r\n  const handleInput = (key, value) => {\r\n    setLoginDetails({\r\n      ...loginDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleInputError = (key, status, message) => {\r\n    setInputErrorHandler({\r\n      ...inputErrorHandler,\r\n      [key]: {\r\n        error: status,\r\n        message: message,\r\n      },\r\n    });\r\n  };\r\n\r\n\r\n  const handleLogin = () => {\r\n    const verified = !Object.keys(inputErrorHandler).some((obj) => {\r\n      return inputErrorHandler[obj].error;\r\n    });\r\n    if (verified) {\r\n      axios\r\n        .post(apiList.login, loginDetails)\r\n        .then((response) => {\r\n          localStorage.setItem(\"token\", response.data.token);\r\n          localStorage.setItem(\"type\", response.data.type);\r\n          setLoggedin(isAuth());\r\n          setPopup({\r\n            open: true,\r\n            severity: \"success\",\r\n            message: \"Logged in successfully\",\r\n          });\r\n          console.log(response);\r\n        })\r\n        .catch((err) => {\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: err.response.data.message,\r\n          });\r\n          console.log(err.response);\r\n        });\r\n    } else {\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"Incorrect Input\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return loggedin ? (\r\n    <Redirect to=\"/home\" />\r\n  ) : (<>\r\n    <Paper elevation={3} className={classes.body}>\r\n      <Grid container  xs ={4} direction=\"column\" spacing={5} alignItems=\"center\" justify = 'center' \r\n      style={{\r\n        margin:\"100px auto 50px auto\",\r\n        padding:\"20px\",\r\n        boxShadow: \"0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22)\"\r\n    }}\r\n    >\r\n      \r\n        <Grid item>\r\n          <Typography variant=\"h3\" component=\"h2\">\r\n            Login\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <EmailInput\r\n            label=\"Email\"\r\n            value={loginDetails.email}\r\n            onChange={(event) => handleInput(\"email\", event.target.value)}\r\n            inputErrorHandler={inputErrorHandler}\r\n            handleInputError={handleInputError}\r\n            className={classes.inputBox}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <PasswordInput\r\n            label=\"Password\"\r\n            value={loginDetails.password}\r\n            onChange={(event) => handleInput(\"password\", event.target.value)}\r\n            className={classes.inputBox}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => handleLogin()}\r\n            className={classes.submitButton}\r\n          >\r\n            Login\r\n          </Button>\r\n        </Grid>\r\n      \r\n        <Link href=\"#\"  data-toggle=\"modal\" data-target=\"#exampleModalCenter\">Forgot Password</Link>\r\n      </Grid>\r\n  \r\n    </Paper>\r\n\r\n<div class=\"modal fade\" id=\"exampleModalCenter\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\r\n  <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\" id=\"exampleModalLongTitle\">Reset Your Account Password</h5>\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n\t\t\t\t\t<div class=\"modal-body\">\r\n\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t<label for=\"accountEmail\">Account Email</label>\r\n\t\t\t\t\t\t\t<input type=\"email\" class=\"form-control\" required=\"required\" name=\"accountEmail\"  />\r\n              {/* placeholder=\"please enter your email address\" */}\r\n\t\t\t\t\t\t\t<span class=\"help-block\">The email address associated with your Account.</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n        <button type=\"button\" class=\"btn btn-primary\">Send</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n  </>);\r\n};\r\n\r\nexport default Login;\r\n","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Logout.js",["164"],"import { useEffect, useContext } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nconst Logout = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  useEffect(() => {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"type\");\r\n    setPopup({\r\n      open: true,\r\n      severity: \"success\",\r\n      message: \"Logged out successfully\",\r\n    });\r\n  }, []);\r\n  return <Redirect to=\"/login\" />;\r\n};\r\n\r\nexport default Logout;\r\n","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Profile.js",["165","166","167","168","169","170","171","172"],"import { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  Modal,\r\n  Paper,\r\n  makeStyles,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\nimport FileUploadInput from \"../lib/FileUploadInput\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    // padding: \"30px\",\r\n  },\r\n}));\r\n\r\nconst MultifieldInput = (props) => {\r\n  const classes = useStyles();\r\n  const { education, setEducation } = props;\r\n\r\n  return (\r\n    <>\r\n      {education.map((obj, key) => (\r\n        <Grid item container className={classes.inputBox} key={key}>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              label={`Institution Name #${key + 1}`}\r\n              value={education[key].institutionName}\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].institutionName = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <TextField\r\n              label=\"Start Year\"\r\n              value={obj.startYear}\r\n              variant=\"outlined\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].startYear = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <TextField\r\n              label=\"End Year\"\r\n              value={obj.endYear}\r\n              variant=\"outlined\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].endYear = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      ))}\r\n      <Grid item style={{ alignSelf: \"center\" }}>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={() =>\r\n            setEducation([\r\n              ...education,\r\n              {\r\n                institutionName: \"\",\r\n                startYear: \"\",\r\n                endYear: \"\",\r\n              },\r\n            ])\r\n          }\r\n          className={classes.inputBox}\r\n        >\r\n          Add another institution details\r\n        </Button>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Profile = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [userData, setUserData] = useState();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [profileDetails, setProfileDetails] = useState({\r\n    name: \"\",\r\n    education: [],\r\n    skills: [],\r\n    resume: \"\",\r\n    profile: \"\",\r\n  });\r\n\r\n  const [education, setEducation] = useState([\r\n    {\r\n      institutionName: \"\",\r\n      startYear: \"\",\r\n      endYear: \"\",\r\n    },\r\n  ]);\r\n\r\n  const handleInput = (key, value) => {\r\n    setProfileDetails({\r\n      ...profileDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(apiList.user, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setProfileDetails(response.data);\r\n        if (response.data.education.length > 0) {\r\n          setEducation(\r\n            response.data.education.map((edu) => ({\r\n              institutionName: edu.institutionName ? edu.institutionName : \"\",\r\n              startYear: edu.startYear ? edu.startYear : \"\",\r\n              endYear: edu.endYear ? edu.endYear : \"\",\r\n            }))\r\n          );\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const editDetails = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    console.log(education);\r\n\r\n    let updatedDetails = {\r\n      ...profileDetails,\r\n      education: education\r\n        .filter((obj) => obj.institutionName.trim() !== \"\")\r\n        .map((obj) => {\r\n          if (obj[\"endYear\"] === \"\") {\r\n            delete obj[\"endYear\"];\r\n          }\r\n          return obj;\r\n        }),\r\n    };\r\n\r\n    axios\r\n      .put(apiList.user, updatedDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n      });\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h2\">Profile</Typography>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Paper\r\n            style={{\r\n              padding: \"20px\",\r\n              outline: \"none\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Grid container direction=\"column\" alignItems=\"stretch\" spacing={3}>\r\n              <Grid item>\r\n                <TextField\r\n                  label=\"Name\"\r\n                  value={profileDetails.name}\r\n                  onChange={(event) => handleInput(\"name\", event.target.value)}\r\n                  className={classes.inputBox}\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <MultifieldInput\r\n                education={education}\r\n                setEducation={setEducation}\r\n              />\r\n              <Grid item>\r\n                <ChipInput\r\n                  className={classes.inputBox}\r\n                  label=\"Skills\"\r\n                  variant=\"outlined\"\r\n                  helperText=\"Press enter to add skills\"\r\n                  value={profileDetails.skills}\r\n                  onAdd={(chip) =>\r\n                    setProfileDetails({\r\n                      ...profileDetails,\r\n                      skills: [...profileDetails.skills, chip],\r\n                    })\r\n                  }\r\n                  onDelete={(chip, index) => {\r\n                    let skills = profileDetails.skills;\r\n                    skills.splice(index, 1);\r\n                    setProfileDetails({\r\n                      ...profileDetails,\r\n                      skills: skills,\r\n                    });\r\n                  }}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FileUploadInput\r\n                  className={classes.inputBox}\r\n                  label=\"Resume (.pdf)\"\r\n                  icon={<DescriptionIcon />}\r\n                  uploadTo={apiList.uploadResume}\r\n                  handleInput={handleInput}\r\n                  identifier={\"resume\"}\r\n                />\r\n              </Grid>\r\n              {/* <Grid item>\r\n                <FileUploadInput\r\n                  className={classes.inputBox}\r\n                  label=\"Profile Photo (.jpg/.png)\"\r\n                  icon={<FaceIcon />}\r\n                  uploadTo={apiList.uploadProfileImage}\r\n                  handleInput={handleInput}\r\n                  identifier={\"profile\"}\r\n                />\r\n              </Grid> */}\r\n            </Grid>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\r\n              onClick={() => handleUpdate()}\r\n            >\r\n              Update Details\r\n            </Button>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n      {/* <Modal open={open} onClose={handleClose} className={classes.popupDialog}> */}\r\n\r\n      {/* </Modal> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","D:\\prohiree-MERN\\prohiree\\client\\src\\lib\\isAuth.js",[],"D:\\prohiree-MERN\\prohiree\\client\\src\\component\\recruiter\\JobApplications.js",["173","174","175","176","177","178","179","180","181"],"D:\\prohiree-MERN\\prohiree\\client\\src\\lib\\MessagePopup.js",["182"],"import { Snackbar, Slide } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\n\r\nconst MessagePopup = (props) => {\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    props.setOpen(false);\r\n  };\r\n  return (\r\n    <Snackbar open={props.open} onClose={handleClose} autoHideDuration={2000}>\r\n      <Alert onClose={handleClose} severity={props.severity}>\r\n        {props.message}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n};\r\n\r\nexport default MessagePopup;\r\n","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\recruiter\\AcceptedApplicants.js",["183","184","185","186","187","188","189","190","191","192"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport axios from \"axios\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList, { server } from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  statusBlock: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(17),\r\n    height: theme.spacing(17),\r\n  },\r\n}));\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          {/* <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Application Status\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={9}\r\n              justify=\"space-around\"\r\n              // alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"rejected\"\r\n                      checked={searchOptions.status.rejected}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Rejected\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"applied\"\r\n                      checked={searchOptions.status.applied}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Applied\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"shortlisted\"\r\n                      checked={searchOptions.status.shortlisted}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Shortlisted\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid> */}\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"name\"\r\n                    checked={searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"name\">\r\n                    <Typography>Name</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.name\"].desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.name\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"jobTitle\"\r\n                    checked={searchOptions.sort[\"job.title\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"job.title\": {\r\n                            ...searchOptions.sort[\"job.title\"],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"jobTitle\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"jobTitle\">\r\n                    <Typography>Job Title</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"job.title\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"job.title\": {\r\n                            ...searchOptions.sort[\"job.title\"],\r\n                            desc: !searchOptions.sort[\"job.title\"].desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"job.title\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"dateOfJoining\"\r\n                    checked={searchOptions.sort.dateOfJoining.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfJoining: {\r\n                            ...searchOptions.sort.dateOfJoining,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"dateOfJoining\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"dateOfJoining\">\r\n                    <Typography>Date of Joining</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.dateOfJoining.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfJoining: {\r\n                            ...searchOptions.sort.dateOfJoining,\r\n                            desc: !searchOptions.sort.dateOfJoining.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.dateOfJoining.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[[\"jobApplicant.rating\"]],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[\"jobApplicant.rating\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.rating\"]\r\n                              .desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.rating\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst ApplicationTile = (props) => {\r\n  const classes = useStyles();\r\n  const { application, getData } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [open, setOpen] = useState(false);\r\n  const [openEndJob, setOpenEndJob] = useState(false);\r\n  const [rating, setRating] = useState(application.jobApplicant.rating);\r\n\r\n  const appliedOn = new Date(application.dateOfApplication);\r\n\r\n  const changeRating = () => {\r\n    axios\r\n      .put(\r\n        apiList.rating,\r\n        { rating: rating, applicantId: application.jobApplicant.userId },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: \"Rating updated successfully\",\r\n        });\r\n        // fetchRating();\r\n        getData();\r\n        setOpen(false);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        // fetchRating();\r\n        getData();\r\n        setOpen(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCloseEndJob = () => {\r\n    setOpenEndJob(false);\r\n  };\r\n\r\n  const colorSet = {\r\n    applied: \"#3454D1\",\r\n    shortlisted: \"#DC851F\",\r\n    accepted: \"#09BC8A\",\r\n    rejected: \"#D1345B\",\r\n    deleted: \"#B49A67\",\r\n    cancelled: \"#FF8484\",\r\n    finished: \"#4EA5D9\",\r\n  };\r\n\r\n  const getResume = () => {\r\n    if (\r\n      application.jobApplicant.resume &&\r\n      application.jobApplicant.resume !== \"\"\r\n    ) {\r\n      const address = `${server}${application.jobApplicant.resume}`;\r\n      console.log(address);\r\n      axios(address, {\r\n        method: \"GET\",\r\n        responseType: \"blob\",\r\n      })\r\n        .then((response) => {\r\n          const file = new Blob([response.data], { type: \"application/pdf\" });\r\n          const fileURL = URL.createObjectURL(file);\r\n          window.open(fileURL);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: \"Error\",\r\n          });\r\n        });\r\n    } else {\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"No resume found\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateStatus = (status) => {\r\n    const address = `${apiList.applications}/${application._id}`;\r\n    const statusData = {\r\n      status: status,\r\n      dateOfJoining: new Date().toISOString(),\r\n    };\r\n    axios\r\n      .put(address, statusData, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        handleCloseEndJob();\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n        handleCloseEndJob();\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Grid container>\r\n        <Grid\r\n          item\r\n          xs={2}\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Avatar\r\n            src={`${server}${application.jobApplicant.profile}`}\r\n            className={classes.avatar}\r\n          />\r\n        </Grid>\r\n        <Grid container item xs={7} spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            <Typography variant=\"h5\">\r\n              {application.jobApplicant.name}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Rating\r\n              value={\r\n                application.jobApplicant.rating !== -1\r\n                  ? application.jobApplicant.rating\r\n                  : null\r\n              }\r\n              readOnly\r\n            />\r\n          </Grid>\r\n          <Grid item>Job Title: {application.job.title}</Grid>\r\n          <Grid item>Role: {application.job.jobType}</Grid>\r\n          <Grid item>Applied On: {appliedOn.toLocaleDateString()}</Grid>\r\n          <Grid item>\r\n            SOP: {application.sop !== \"\" ? application.sop : \"Not Submitted\"}\r\n          </Grid>\r\n          <Grid item>\r\n            {application.jobApplicant.skills.map((skill) => (\r\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container direction=\"column\" xs={2} spacing={2} style={{ margin: \"auto 0px\" }} >\r\n          {/* <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.statusBlock}\r\n              color=\"primary\"\r\n              onClick={() => getResume()}\r\n            >\r\n              View Resume\r\n            </Button>\r\n          </Grid> */}\r\n          <Grid item >\r\n            {/* {buttonSet[application.status]} */}\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.statusBlock}\r\n              style={{\r\n                background: \"#f44336\",\r\n              }}\r\n              onClick={() => {\r\n                setOpenEndJob(true);\r\n              }}\r\n            >\r\n              End Job\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.statusBlock}\r\n              onClick={() => {\r\n                setOpen(true);\r\n              }}\r\n            >\r\n              Rate Applicant\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Rating\r\n            name=\"simple-controlled\"\r\n            style={{ marginBottom: \"30px\" }}\r\n            value={rating === -1 ? null : rating}\r\n            onChange={(event, newValue) => {\r\n              setRating(newValue);\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            onClick={() => changeRating()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n      <Modal\r\n        open={openEndJob}\r\n        onClose={handleCloseEndJob}\r\n        className={classes.popupDialog}\r\n      >\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\r\n            Are you sure?\r\n          </Typography>\r\n          <Grid container justify=\"center\" spacing={5}>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => {\r\n                  updateStatus(\"finished\");\r\n                }}\r\n              >\r\n                Yes\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleCloseEndJob()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst AcceptedApplicants = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [applications, setApplications] = useState([]);\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    sort: {\r\n      \"jobApplicant.name\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      \"job.title\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      dateOfJoining: {\r\n        status: true,\r\n        desc: true,\r\n      },\r\n      \"jobApplicant.rating\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [];\r\n    searchParams = [...searchParams, `status=accepted`];\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = `${apiList.applicants}`;\r\n    if (queryString !== \"\") {\r\n      address = `${address}?${queryString}`;\r\n    }\r\n\r\n    console.log(address);\r\n\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setApplications(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        // console.log(err.response.data);\r\n        setApplications([]);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h2\">Employees</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <IconButton onClick={() => setFilterOpen(true)}>\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          item\r\n          xs\r\n          direction=\"column\"\r\n          style={{ width: \"100%\" }}\r\n          alignItems=\"stretch\"\r\n          justify=\"center\"\r\n        >\r\n          {applications.length > 0 ? (\r\n            applications.map((obj) => (\r\n              <Grid item>\r\n                {/* {console.log(obj)} */}\r\n                <ApplicationTile application={obj} getData={getData} />\r\n              </Grid>\r\n            ))\r\n          ) : (\r\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\r\n              No Applications Found\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n      <FilterPopup\r\n        open={filterOpen}\r\n        searchOptions={searchOptions}\r\n        setSearchOptions={setSearchOptions}\r\n        handleClose={() => setFilterOpen(false)}\r\n        getData={() => {\r\n          getData();\r\n          setFilterOpen(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AcceptedApplicants;\r\n","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Footer\\Footer.js",["193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211"],"import React from 'react';\r\nimport \"./Footer.css\"\r\nfunction Footer() {\r\n    return (\r\n      \r\n      <React.Fragment>    \r\n          <footer id=\"sec5\">\r\n        <div className=\"foot\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-3 col-md-6 foot_add\">\r\n                        <h3 style={{color: \"#2e55fa\"}}>Job Portal</h3>\r\n                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\r\n                    </div>\r\n                    <div className=\"col-lg-3 col-md-6 foot_icon\">\r\n                        <h4>Job Seekers</h4>\r\n                        <ul>\r\n                          <li><i className=\"fas fa-chevron-right\"></i><a href=\"#\">Register Now</a></li>\r\n                          <li><i className=\"fas fa-chevron-right\"></i><a href=\"#\">Search Jobs</a></li>\r\n                          <li><i className=\"fas fa-chevron-right\"></i><a href=\"#\">Login</a></li>\r\n                          <li><i className=\"fas fa-chevron-right\"></i><a href=\"#\">Create Job Alert</a></li>\r\n                          <li><i className=\"fas fa-chevron-right\"></i><a href=\"#\">Report a Problem</a></li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"col-lg-3 col-md-6 foot_icon\">\r\n                        <h4>Employers</h4>\r\n                        <ul>\r\n                            <li><i className=\"fas fa-chevron-right\"></i> <a href=\"#\">Job Posting</a></li>\r\n                            <li><i className=\"fas fa-chevron-right\"></i> <a href=\"#\">Recruiter Login</a></li>\r\n                            <li><i className=\"fas fa-chevron-right\"></i> <a href=\"#\">Resume Database Access</a></li>\r\n                            <li><i className=\"fas fa-chevron-right\"></i> <a href=\"#\">Report a Problem</a></li>\r\n                            <li><i className=\"fas fa-chevron-right\"></i> <a href=\"#\">Others</a></li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"col-lg-3 col-md-6 foot_icon\">\r\n                        <h4>Browse Jobs</h4>\r\n                        <ul>\r\n                            <li><i className=\"fas fa-chevron-right\"></i> <a href=\"#\">Browse All Jobs</a></li>\r\n                            <li><i className=\"fas fa-chevron-right\"></i> <a href=\"#\">Jobs by Company</a></li>\r\n                            <li><i className=\"fas fa-chevron-right\"></i> <a href=\"#\">Jobs by Category</a></li>\r\n                            <li><i className=\"fas fa-chevron-right\"></i> <a href=\"#\">Jobs by Location</a></li>\r\n                            <li><i className=\"fas fa-chevron-right\"></i> <a href=\"#\">Jobs by Skill</a></li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row crt\">\r\n                    <div className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                        Copyright <b style={{color: \"#2e55fa\"}}>Job Portal</b>. All Rights Reserved\r\n                    </div>\r\n                    <div className=\"foot_web col-lg-6 col-md-6 col-sm-12\">\r\n                        <a href=\"\"><i className=\"fab fa-linkedin\"></i></a>\r\n                        <a href=\"\"><i className=\"fab fa-instagram\"></i></a>\r\n                        <a href=\"\"><i className=\"fab fa-facebook\"></i></a>\r\n                        <a href=\"\"><i className=\"fab fa-twitter\"></i></a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </footer>\r\n  \r\n      </React.Fragment>   \r\n  );\r\n  }\r\n  \r\n  export default Footer;\r\n","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\recruiter\\Profile.js",["212","213"],"import { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  Modal,\r\n  Paper,\r\n  makeStyles,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/material.css\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    // padding: \"30px\",\r\n  },\r\n}));\r\n\r\nconst Profile = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [profileDetails, setProfileDetails] = useState({\r\n    name: \"\",\r\n    bio: \"\",\r\n    contactNumber: \"\",\r\n  });\r\n\r\n  const [phone, setPhone] = useState(\"\");\r\n\r\n  const handleInput = (key, value) => {\r\n    setProfileDetails({\r\n      ...profileDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(apiList.user, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setProfileDetails(response.data);\r\n        setPhone(response.data.contactNumber);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    let updatedDetails = {\r\n      ...profileDetails,\r\n    };\r\n    if (phone !== \"\") {\r\n      updatedDetails = {\r\n        ...profileDetails,\r\n        contactNumber: `+${phone}`,\r\n      };\r\n    } else {\r\n      updatedDetails = {\r\n        ...profileDetails,\r\n        contactNumber: \"\",\r\n      };\r\n    }\r\n\r\n    axios\r\n      .put(apiList.user, updatedDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h2\">Profile</Typography>\r\n        </Grid>\r\n        <Grid item xs style={{ width: \"100%\" }}>\r\n          <Paper\r\n            style={{\r\n              padding: \"20px\",\r\n              outline: \"none\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              //   width: \"60%\",\r\n            }}\r\n          >\r\n            <Grid container direction=\"column\" alignItems=\"stretch\" spacing={3}>\r\n              <Grid item>\r\n                <TextField\r\n                  label=\"Name\"\r\n                  value={profileDetails.name}\r\n                  onChange={(event) => handleInput(\"name\", event.target.value)}\r\n                  className={classes.inputBox}\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  style={{ width: \"100%\" }}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  label=\"Bio (upto 250 words)\"\r\n                  multiline\r\n                  rows={8}\r\n                  style={{ width: \"100%\" }}\r\n                  variant=\"outlined\"\r\n                  value={profileDetails.bio}\r\n                  onChange={(event) => {\r\n                    if (\r\n                      event.target.value.split(\" \").filter(function (n) {\r\n                        return n !== \"\";\r\n                      }).length <= 250\r\n                    ) {\r\n                      handleInput(\"bio\", event.target.value);\r\n                    }\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                <PhoneInput\r\n                  country={\"in\"}\r\n                  value={phone}\r\n                  onChange={(phone) => setPhone(phone)}\r\n                  style={{ width: \"auto\" }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\r\n              onClick={() => handleUpdate()}\r\n            >\r\n              Update Details\r\n            </Button>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Welcome\\Welcome.js",["214","215","216","217","218","219","220","221","222","223","224","225","226"],"import { Grid, Typography } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\n// import OwlCarousel from 'react-owl-carousel';\r\n// import 'owl.carousel/dist/assets/owl.carousel.css';\r\n// import 'owl.carousel/dist/assets/owl.theme.default.css';\r\nimport ReactPaginate from \"react-paginate\";\r\nimport {GrFormPrevious, GrFormNext} from 'react-icons/gr'\r\nimport './Welcome.css'\r\nimport { BiHeart } from \"react-icons/bi\";\r\nimport axios from \"axios\";\r\nimport apiList from \"../../lib/apiList\";\r\nimport Pager from \"./pager\";\r\nimport \"../../App.css\"\r\nconst Welcome = (props) => {\r\n    const [jobs,setJobs] = useState([]);\r\n  const Options = {\r\n    margin: 30,\r\n    responsiveClass: true,\r\n    // nav: true,\r\n    autoplay: true,\r\n    loop: true,\r\n    // navText: [\"Prev\", \"Next\"],\r\n    smartSpeed: 5000,\r\n    responsive: {\r\n        0: {\r\n            items: 1,\r\n        },\r\n        400: {\r\n            items: 1,\r\n        },\r\n        600: {\r\n            items: 2,\r\n        },\r\n        700: {\r\n            items: 3,\r\n        },\r\n        1000: {\r\n            items: 3,\r\n        }\r\n    },\r\n};\r\n\r\n// Pagination code\r\nconst [offset, setOffset] = useState(1);\r\n//   const [data, setData] = useState([]);\r\n  const [perPage, setPerPage] = useState(5);\r\n  const [pageCount, setPageCount] = useState(0);\r\n  const indexOfLastPost = offset * perPage;\r\n    const indexOfFirstPost = indexOfLastPost - perPage;\r\n    const currentPosts = jobs.slice(indexOfFirstPost, indexOfLastPost);\r\n      const handlePageClick = (e) => {\r\n        const selectedPage = e.selected;\r\n        setOffset(selectedPage + 1);\r\n      };\r\n\r\n// useEffect(async()=>{\r\n//    await axios.get(apiList.jobs, {\r\n//         headers: {\r\n//           Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n//         },\r\n//       })\r\n//       .then((response) => {\r\n//         // console.log(response.data);\r\n//         setPageCount(Math.ceil(response.data.length / perPage));\r\n//         setJobs(response.data)\r\n//       })\r\n//       .catch((err) => {\r\n//         console.log(err.response.data);\r\n//       });\r\n      \r\n    \r\n// },[offset])\r\n\r\nuseEffect(()=>{\r\n    axios.get('http://localhost:4444/api/alljobs').then((response) => {\r\n        setPageCount(Math.ceil(response.data.length / perPage));\r\n        setJobs(response.data)\r\n        })\r\n        \r\n},[offset])\r\n\r\n// useEffect(()=>{\r\n//     setPageCount(Math.ceil(jobs.length / perPage));\r\n// },[offset])\r\n\r\n// const [maxPostsPerAction] = useState(5)\r\n//     const [DefaultButton,setStateDefaultButton] = useState(1)\r\n//     const ChangeButtonNumbers=(no)=>{\r\n//       setStateDefaultButton(no)\r\n//     }\r\n//     const lastPostIndex = DefaultButton*maxPostsPerAction;//5\r\n//     const firstPostIndex = lastPostIndex-maxPostsPerAction;//0\r\n//     const Currentpage = jobs?.slice(firstPostIndex,lastPostIndex);\r\n//     const TotalPosts = jobs?.length;\r\n\r\n    \r\n  return (\r\n    <React.Fragment>\r\n            <section>\r\n                <div  id=\"sec1\" className=\"container-fluid\">           \r\n\r\n                <div className=\"container hm1\">\r\n\r\n                    <div className=\"home1\">\r\n                        <a  id=\"am1\" className=\" btn-primary button-sm\" href=\"#\">Find Jobs, Employment &amp; Career Opportunities</a>\r\n                        <h2 className=\"am2\">Search Between More Than <br/> <span className=\"text-primary\">50,000</span> Open Jobs.</h2>\r\n                        </div>\r\n\r\n                        <div className=\"hm2\">\r\n                        <form className=\"form-control\">\r\n                            <div className=\"row\">\r\n                    \r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                    <div className=\"form-group\">\r\n                                        <label>\r\n                                            \r\n                                        </label>\r\n                    \r\n                                        <div className=\"input-group\">\r\n                                            <input type=\"text\" className=\"form-control\" placeholder=\"Job Title, Keywords, or Phrase\"/>\r\n                                            <div className=\"input-group-append\">\r\n                                                <span className=\"input-group-text\">\r\n                                                    <i className=\"fas fa-search\" id=\"fa1\"></i></span>\r\n                                            </div>\r\n                                        </div>\r\n                                </div>\r\n                            </div>\r\n                                   \r\n                            <div className=\"col-lg-4 col-md-6\">\r\n                                <div className=\"form-group\">\r\n                                    <label></label>\r\n                                    <div className=\"input-group\">\r\n                                        <input type=\"text\" className=\"form-control\" placeholder=\"Location\"/>\r\n                                        <div className=\"input-group-append\">\r\n                                            <span className=\"input-group-text\">\r\n                                                <i className=\"fas fa-map-marker-alt\" id=\"fa2\"></i></span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                    \r\n                            <div className=\"col-lg-2 col-md-6\">\r\n                            {/* <label for=\"\"></label> */}\r\n                            <div className=\"Find-job-btn\">\r\n\r\n                            <button id=\"fa3\" type=\"submit\" className=\"btn-primary  btn-block\">Find Job</button>\r\n                            </div>\r\n                                \r\n                            </div>\r\n\r\n                        </div>\r\n                    </form>\r\n                    </div>\r\n\r\n                </div>\r\n                \r\n              </div>\r\n            </section>\r\n            <section id=\"categories\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">   \r\n                        <div className=\"col-lg-6 pc\">\r\n                            <h2 >Popular Categories</h2>\r\n                            <h6 className=\"fw3\">20+ Catetories work wating for you</h6>\r\n                        </div>\r\n                        <div className=\"col-lg-2 text-center\" >\r\n                            <h2 className=\" counter \"><span>1800</span></h2>\r\n                            <h6 >Jobs Posted</h6>\r\n                        </div>\r\n                        <div className=\"col-lg-2 text-center\">\r\n                            <h2 className=\" counter\"><span>4500</span></h2>\r\n                            <h6 >Tasks Posted</h6></div>\r\n                            <div className=\"col-lg-2 text-center\">\r\n                            <h2 className=\" counter\"><span>1500</span></h2>\r\n                            <h6 >Freelancers</h6></div>\r\n                        </div>\r\n                        <div className=\"pt-5 pb-5\">\r\n                            <div className=\"container\">\r\n                            <div className=\"row\">        \r\n                            <div className=\"col-lg-3 col-sm-6\">\r\n                                <div className=\"item\">\r\n                                    <span className=\"icon feature-box-col-one\"><i className=\"fas fa-location-arrow\"></i></span>\r\n                                    <h6>Design, Art & MultiMedia</h6>\r\n                                    <p>198 Open Positions</p> \r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-lg-3 col-sm-6\">\r\n                                <div className=\"item\">\r\n                                    <span className=\"icon feature-box-col-two\"><i className=\"fas fa-archive\"></i></span>\r\n                            \r\n                                    <h6>Creative Design</h6>\r\n                                    <p>198 Open Positions</p>  \r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-lg-3 col-sm-6\">\r\n                                <div className=\"item\">\r\n                                    <span className=\"icon feature-box-col-three\"><i className=\"fas fa-wallet\"></i></span>  \r\n                                    <h6>Your Photoshopping</h6>\r\n                                    <p>198 Open Positions</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-lg-3 col-sm-6\">\r\n                                <div className=\"item\">\r\n                                    <span className=\"icon feature-box-col-four\"><i className=\"fas fa-cloud-upload-alt\"></i></span>\r\n                                    <h6>Business Growth</h6>\r\n                                    <p>198 Open Positions</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-lg-3 col-sm-6\">\r\n                                <div className=\"item\">\r\n                                    <span className=\"icon feature-box-col-five\"><i className=\"fas fa-chart-bar\"></i></span>\r\n                                    <h6>Market Strategy</h6>\r\n                                    <p>198 Open Positions</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-lg-3 col-sm-6\">\r\n                                <div className=\"item\">\r\n                                    <span className=\"icon feature-box-col-six\"><i className=\"fas fa-tablet\"></i></span>\r\n                                    <h6>Retina Ready</h6>\r\n                                    <p>198 Open Positions</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-lg-3 col-sm-6\">\r\n                                <div className=\"item\">\r\n                                    <span className=\"icon feature-box-col-six\"><i className=\"fas fa-camera\"></i></span>                     \r\n                                    <h6>Retina Ready</h6>\r\n                                    <p>198 Open Positions</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-lg-3 col-sm-6\">\r\n                                <div className=\"item\">\r\n                                    <span className=\"icon feature-box-col-six\"><i className=\"fas fa-solar-panel\"></i></span>\r\n                                    <h6>Retina Ready</h6>\r\n                                    <p>198 Open Positions</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </section>\r\n            <div id=\"sec3\">\r\n        <div className=\"container text-center\">\r\n            <h2>Featured Cities</h2>\r\n            <p>20+ Featured Cities Added Jobs</p>\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-3 col-md-6 mb-4\">\r\n                    <div className=\"card img-fluid city\">\r\n                      <img className=\"card-img-top\" src=\"img/card 1.jpg\" alt=\"\"/>\r\n                      <div className=\"card-img-overlay\">\r\n                        <div className=\"card-body text-left text-white\">\r\n                            <h4 className=\"card-title\">Hyderabad</h4>\r\n                            <p>50 Jobs</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>       \r\n                </div>\r\n                <div className=\"col-lg-3 col-md-6 mb-4\">\r\n                    <div className=\"card img-fluid city\">\r\n                      <img className=\"card-img-top\" src=\"img/card 2.jpg\" alt=\"\"/>\r\n                      <div className=\"card-img-overlay\">\r\n                        <div className=\"card-body text-left text-white\">\r\n                            <h4 className=\"card-title\">Mumbai</h4>\r\n                            <p>50 Jobs</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>       \r\n                </div>\r\n                <div className=\"col-lg-3 col-md-6 mb-4\">\r\n                    <div className=\"card img-fluid city\">\r\n                      <img className=\"card-img-top\" src=\"img/card 3.jpg\" alt=\"\"/>\r\n                      <div className=\"card-img-overlay\">\r\n                        <div className=\"card-body text-left text-white \">\r\n                            <h4 className=\"card-title\">Chennai</h4>\r\n                            <p>50 Jobs</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>       \r\n                </div>\r\n                <div className=\"col-lg-3 col-md-6 mb-4\">\r\n                    <div className=\"card img-fluid city\">\r\n                      <img className=\"card-img-top\" src=\"img/card 4.jpg\" alt=\"\"/>\r\n                      <div className=\"card-img-overlay\">\r\n                        <div className=\"card-body text-left text-white\">\r\n                            <h4 className=\"card-title\">Pune</h4>\r\n                            <p>50 Jobs</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>       \r\n                </div>\r\n                <div className=\"col-lg-3 col-md-6 mb-4\">\r\n                    <div className=\"card img-fluid city\">\r\n                      <img className=\"card-img-top\" src=\"img/card 5.jpg\" alt=\"\"/>\r\n                      <div className=\"card-img-overlay\">\r\n                        <div className=\"card-body text-left text-white\">\r\n                            <h4 className=\"card-title\">Bangalore</h4>\r\n                            <p>50 Jobs</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>       \r\n                </div>\r\n                <div className=\"col-lg-3 col-md-6 mb-4\">\r\n                    <div className=\"card img-fluid city\">\r\n                      <img className=\"card-img-top\" src=\"img/card 6.jpg\" alt=\"\"/>\r\n                      <div className=\"card-img-overlay\">\r\n                        <div className=\"card-body text-left text-white\">\r\n                            <h4 className=\"card-title\">Delhi</h4>\r\n                            <p>50 Jobs</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>       \r\n                </div>\r\n                <div className=\"col-lg-3 col-md-6 mb-4\">\r\n                    <div className=\"card img-fluid city\">\r\n                      <img className=\"card-img-top\" src=\"img/card 7.jpg\" alt=\"\"/>\r\n                      <div className=\"card-img-overlay\">\r\n                        <div className=\"card-body text-left text-white\">\r\n                            <h4 className=\"card-title\">Kolkata</h4>\r\n                            <p>50 Jobs</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>       \r\n                </div>\r\n                <div className=\"col-lg-3 col-md-6 mb-4\">\r\n                    <div className=\"card img-fluid city\">\r\n                      <img className=\"card-img-top\" src=\"img/card 8.jpg\" alt=\"\"/>\r\n                      <div className=\"card-img-overlay\">\r\n                        <div className=\"card-body text-left text-white\">\r\n                            <h4 className=\"card-title\">Ahmedabad</h4>\r\n                            <p>50 Jobs</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>       \r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    </div>\r\n\r\n\r\n\r\n    <div id=\"sec4\">\r\n        <div className=\"container\">\r\n            <div className=\"d-flex mb-4\">\r\n                <div className=\"mr-auto\">\r\n                    <h2>Recent Jobs</h2>\r\n                    <h6>20+ Recently Added Jobs</h6>\r\n                </div>\r\n                <div className=\"align-self-end\">\r\n                    <a className=\"browse button\" href=\"#\">Browse All Jobs <i className=\"fas fa-chevron-right\"></i></a>\r\n                </div>\r\n            </div>    \r\n            <div className=\"row\">\r\n                <div className=\"col-lg-9\">\r\n              \r\n                        {\r\n                            currentPosts.map((val,index)=>{\r\n                            return(\r\n                                <ul className=\"job-post\">\r\n                                <li>\r\n                                   <div className=\"job-box\">\r\n                                       <div className=\"d-flex mb-4\">\r\n                                           <div className=\"job-company\">\r\n                                               <span><img alt=\"\" src=\"\"/></span>\r\n                                           </div>\r\n                                           <div className=\"job-info\">\r\n                                               <h4><a href=\"#\">{val.title}</a></h4>\r\n                                               <ul>\r\n                                                   <li><i className=\"fas fa-map-marker-alt\"></i>Kolkata</li>\r\n                                                   <li><i className=\"far fa-bookmark\"></i>Full Time</li>\r\n                                                   <li><i className=\"far fa-clock\"></i>Published 20 days ago</li>\r\n                                               </ul>\r\n                                           </div>\r\n                                       </div>\r\n                                       <div className=\"d-flex\">\r\n                                           <div className=\"job-type mr-auto\">\r\n                                               <a href=\"#\"><span>{val.jobType}</span></a>\r\n                                           </div>\r\n                                           <div className=\"salary\">\r\n                                               <span><i className=\"fas fa-rupee-sign\"></i> 40000 - <i className=\"fas fa-rupee-sign\"></i> 50000</span>\r\n                                           </div>\r\n                                           <label className=\"wishlist\">\r\n                                               <input type=\"checkbox\"/><span className=\"added\">\r\n                                                 <BiHeart size={28} style={{width:\"26px\"}}/>\r\n                                                 </span>\r\n                                           </label>   \r\n                                       </div>                            \r\n                                   </div>\r\n                               </li>\r\n                               </ul>\r\n                               \r\n                            )   \r\n                          \r\n                            })\r\n                        }\r\n                            {/* <Pager MaxPostPerAction={maxPostsPerAction}\r\n                              TotalPosts={TotalPosts}\r\n                              ChangeButtonNumbers={(no)=>ChangeButtonNumbers(no)}\r\n                              Currentpage={Currentpage} /> */}\r\n                        <div className=\"pagination-container\">\r\n                            <ReactPaginate\r\n                            previousLabel={<GrFormPrevious />}\r\n                            nextLabel={<GrFormNext />}\r\n                            breakLabel={\"...\"}\r\n                            breakClassName={\"break-me\"}\r\n                            pageCount={pageCount}\r\n                            marginPagesDisplayed={2}\r\n                            pageRangeDisplayed={5}\r\n                            onPageChange={handlePageClick}\r\n                            containerClassName={\"pagination\"}\r\n                            subContainerClassName={\"pages pagination\"}\r\n                            activeClassName={\"active\"}\r\n                            />\r\n                        </div>\r\n                  \r\n                </div>\r\n                <div className=\"col-lg-3\">\r\n                    <div className=\"sticky-top\">\r\n                        <div className=\"member mb-4\">\r\n                            <div className=\"member-box\">\r\n                                <div className=\"test-pic round\">\r\n                                    <img src=\"\" alt=\"\"/>\r\n                                </div>\r\n                                <div className=\"test-matter\">\r\n                                    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\r\n                                </div>\r\n                                <div className=\"test-location\">\r\n                                    <p><b className=\"test-name\">Richard Anderson</b></p>\r\n                                    <p><span className=\"test-place\">Nevada, USA</span></p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"sentence-box\">\r\n                            <div className=\"sentence-matter\">\r\n                                <h4>Make a Difference with Your Online Resume!</h4>\r\n                                <p>Your resume in minutes with JobBoard resume assistant is ready!</p>\r\n                                <a className=\"acc-btn\" href=\"#\">Create an Account</a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n    {/* <section id=\"testimonials\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-8 offset-lg-2 col-md-10 offset-md-1\">\r\n                        <div className=\"section-heading text-center\">\r\n                            <h6> Testimonials</h6>\r\n                            <h5>Few words from candidates</h5>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='container py-5' > */}\r\n                {/* <OwlCarousel  {...Options} > */}\r\n                    {/* <div className=\"testimonial\">\r\n                        <p className=\"description\" >\r\n                            Lorem Ipsum is simply dummy text of the printing and typesetting industry text ever.\r\n                        </p>\r\n                        <img className=\"img pic\" src={'/img/card 1.jpg'} />\r\n                        <div className=\"Carousel_names\">\r\n                        <h3 className=\"title\"> Broad Pit</h3>\r\n                        <p className=\"post\">Web Developer</p>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"testimonial\">\r\n                        <p className=\"description\" >\r\n                            Lorem Ipsum is simply dummy text of the printing and typesetting industry text ever.\r\n                        </p>\r\n                        <img className=\"img pic\" src={'/img/card 1.jpg'} />\r\n                        <div className=\"Carousel_names\">\r\n                        <h3 className=\"title\"> Broad Pit</h3>\r\n                        <p className=\"post\">Web Developer</p>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"testimonial\">\r\n                        <p className=\"description\" >\r\n                            Lorem Ipsum is simply dummy text of the printing and typesetting industry text ever.\r\n                        </p>\r\n                        <img className=\"img pic\" src={'/img/card 1.jpg'} />\r\n                        <div className=\"Carousel_names\">\r\n                        <h3 className=\"title\"> Broad Pit</h3>\r\n                        <p className=\"post\">Web Developer</p>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                    <div className=\"testimonial\">\r\n                        <p className=\"description\" >\r\n                            Lorem Ipsum is simply dummy text of the printing and typesetting industry text ever.\r\n                        </p>\r\n                        <img className=\"img pic\" src={'/img/card 1.jpg'} />\r\n                        <div className=\"Carousel_names\">\r\n                        <h3 className=\"title\"> Broad Pit</h3>\r\n                        <p className=\"post\">Web Developer</p>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                    <div className=\"testimonial\">\r\n                        <p className=\"description\" >\r\n                            Lorem Ipsum is simply dummy text of the printing and typesetting industry text ever.\r\n                        </p>\r\n                        <img className=\"img pic\" src={'/img/card 1.jpg'} />\r\n                        <div className=\"Carousel_names\">\r\n                        <h3 className=\"title\"> Broad Pit</h3>\r\n                        <p className=\"post\">Web Developer</p>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                    <div className=\"testimonial\">\r\n                        <p className=\"description\" >\r\n                            Lorem Ipsum is simply dummy text of the printing and typesetting industry text ever.\r\n                        </p>\r\n                        <img className=\"img pic\" src={'/img/card 1.jpg'} />\r\n                        <div className=\"Carousel_names\">\r\n                        <h3 className=\"title\"> Broad Pit</h3>\r\n                        <p className=\"post\">Web Developer</p>\r\n                        </div>\r\n\r\n\r\n                    </div>              */}\r\n{/*                    \r\n                    <div><img className=\"img\" src={'/img/card 1.jpg'} /></div>\r\n                    <div><img className=\"img\" src={'/img/card 1.jpg'} /></div>\r\n                    <div><img className=\"img\" src={'/img/card 1.jpg'} /></div>\r\n                    <div><img className=\"img\" src={'/img/card 1.jpg'} /></div>\r\n                    <div><img className=\"img\" src={'/img/card 1.jpg'} /></div> */}\r\n                {/* </OwlCarousel> */}\r\n            {/* </div> */}\r\n        {/* </section> */}\r\n\r\n\r\n        <section className=\"features-section-6 section\">\r\n        <div className=\"container text-center\">\r\n            <h2>Membership Plans</h2>\r\n            <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy.</p>\r\n            <div className=\"row section-separator\">\r\n\r\n                {/* <!-- Start: Section Heading --> */}\r\n                <div className=\"section-header col-md-8\">\r\n                \r\n                </div>\r\n                {/* <!-- End: Section Heading --> */}\r\n\r\n                <div className=\"pricing-table pricing-table-js col-xs-12\">\r\n                    <div className=\"row\">\r\n                        \r\n                        <div className=\"col-md-4 each-table col-xs-12\">\r\n                            <div className=\"table-single right text-center\">\r\n\r\n                                <div className=\"rounded-lg shadow\">\r\n                                    <h4 className=\"text-uppercase font-weight-bold mb-4\">Basic</h4>\r\n                                    <h6 className=\"font-weight-bold\" id=\"fr\">Free</h6>\r\n                                    <p className=\"prd\">\r\n                                        Lorem ipsum dolor sit amet consectetur adipisicing, deleniti quama voluptates amet.\r\n                                    </p>\r\n                                    <a href=\"#\"><button id=\"bt\" type=\"button\" className=\"btn btn-primary navbar-btn\">SIGNUP</button></a>\r\n                                    \r\n                                </div>\r\n\r\n                            </div> \r\n                            {/* <!-- End: .table-single --> */}\r\n                        </div> \r\n                        {/* <!-- End: .each-table --> */}\r\n                        <div className=\"col-md-4 each-table\">\r\n                            <div className=\"table-single open text-center active\">\r\n\r\n                                <div className=\" rounded-lg shadow\">\r\n                                    <h4 className=\"text-uppercase font-weight-bold mb-4\" id=\"hd2\">Professional</h4>\r\n                                    <h6 className=\"font-weight-bold\" id=\"fr\">$29 /Installation</h6>\r\n                                    <p className=\"prd\">\r\n                                        Lorem ipsum dolor sit amet consectetur adipisicing, deleniti quama voluptates amet.\r\n                                    </p>\r\n                                    <a href=\"#\"><button id=\"bt\" type=\"button\" className=\"btn btn-primary navbar-btn\">SIGNUP</button></a>\r\n                                    \r\n                                </div>\r\n\r\n                            </div>\r\n                             {/* <!-- End: .table-single --> */}\r\n                        </div> \r\n                        {/* <!-- End: .each-table --> */}\r\n                        <div className=\"col-md-4 each-table\">\r\n                            <div className=\"table-single left text-center\">\r\n\r\n                                <div className=\" rounded-lg shadow\">\r\n                                    <h4 className=\"text-uppercase font-weight-bold mb-4\">Extended</h4>\r\n                                    <h6 className=\"font-weight-bold\" id=\"fr\">$29 /Installation</h6>\r\n                                    <p className=\"prd\">\r\n                                        Lorem ipsum dolor sit amet consectetur adipisicing, deleniti quama voluptates amet.\r\n                                    </p>\r\n                                    <a href=\"#\"><button id=\"bt\" type=\"button\" className=\"btn btn-primary navbar-btn\">SIGNUP</button></a>\r\n                                    \r\n                                </div>\r\n\r\n                            </div> \r\n                            {/* <!-- End: .table-single --> */}\r\n                        </div> \r\n                        {/* <!-- End: .each-table --> */}\r\n\r\n                    </div> \r\n                    {/* <!-- End: .row --> */}\r\n                </div> \r\n                {/* <!-- End: .pricing-table --> */}\r\n\r\n            </div> \r\n            {/* <!-- End: .row --> */}\r\n        </div> \r\n        {/* <!-- End: .container --> */}\r\n    </section>\r\n  \r\n            </React.Fragment>\r\n  );\r\n};\r\n\r\nexport const ErrorPage = (props) => {\r\n  return (\r\n    <Grid\r\n      container\r\n      item\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      justify=\"center\"\r\n      style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n    >\r\n      <Grid item>\r\n        <Typography variant=\"h2\">Error 404</Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\recruiter\\MyJobs.js",["227","228","229","230","231","232"],"D:\\prohiree-MERN\\prohiree\\client\\src\\lib\\apiList.js",[],"D:\\prohiree-MERN\\prohiree\\client\\src\\lib\\PasswordInput.js",[],"D:\\prohiree-MERN\\prohiree\\client\\src\\lib\\EmailInput.js",[],"D:\\prohiree-MERN\\prohiree\\client\\src\\lib\\FileUploadInput.js",["233"],"import { useState, useContext } from \"react\";\r\nimport { Grid, Button, TextField, LinearProgress } from \"@material-ui/core\";\r\nimport { CloudUpload } from \"@material-ui/icons\";\r\nimport Axios from \"axios\";\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nconst FileUploadInput = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const { uploadTo, identifier, handleInput } = props;\r\n\r\n  const [file, setFile] = useState(\"\");\r\n  const [uploadPercentage, setUploadPercentage] = useState(0);\r\n  const filetype=[\"application/pdf\"]\r\n  const Imagefiletype=[\"image/jpg\",\"image/jpeg\",\"image/png\"]\r\n  const handleUpload = () => {\r\n    \r\n    if(identifier ===\"resume\"){\r\n      if(filetype.includes(file.type)){\r\n        const data = new FormData();\r\n        data.append(\"file\", file);\r\n        data.append(\"upload_preset\",\"Test_post\");\r\n        data.append(\"cloud_name\",\"dipak1243\");\r\n        Axios.post(\"https://api.cloudinary.com/v1_1/dipak1243/image/upload\", data, {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n          },\r\n          onUploadProgress: (progressEvent) => {\r\n            setUploadPercentage(\r\n              parseInt(\r\n                Math.round((progressEvent.loaded * 100) / progressEvent.total)\r\n              )\r\n            );\r\n          },\r\n        })\r\n          .then((response) => {\r\n            console.log(response)\r\n            handleInput(identifier, response.data.url);\r\n            setPopup({\r\n              open: true,\r\n              severity: \"success\",\r\n              message: \"File uploaded successfully\",\r\n            });\r\n          })\r\n          .catch((err) => {\r\n            console.log(err.response);\r\n            setPopup({\r\n              open: true,\r\n              severity: \"error\",\r\n              message: \"Error while uploading\",\r\n              //   message: err.response.data\r\n              //     ? err.response.data.message\r\n              //     : err.response.statusText,\r\n            });\r\n          });\r\n        }else{\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: \"Please Select Only PDF\",\r\n            //   message: err.response.data\r\n            //     ? err.response.data.message\r\n            //     : err.response.statusText,\r\n          });\r\n      }\r\n    }else if(identifier === \"profile\"){\r\n      if(Imagefiletype.includes(file.type)){ \r\n      const data = new FormData();\r\n      data.append(\"file\", file);\r\n      data.append(\"upload_preset\",\"Test_post\");\r\n      data.append(\"cloud_name\",\"dipak1243\");\r\n      Axios.post(\"https://api.cloudinary.com/v1_1/dipak1243/image/upload\", data, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n        onUploadProgress: (progressEvent) => {\r\n          setUploadPercentage(\r\n            parseInt(\r\n              Math.round((progressEvent.loaded * 100) / progressEvent.total)\r\n            )\r\n          );\r\n        },\r\n      })\r\n        .then((response) => {\r\n          console.log(response)\r\n          handleInput(identifier, response.data.url);\r\n          setPopup({\r\n            open: true,\r\n            severity: \"success\",\r\n            message: \"File uploaded successfully\",\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err.response);\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: \"Error while uploading\",\r\n            //   message: err.response.data\r\n            //     ? err.response.data.message\r\n            //     : err.response.statusText,\r\n          });\r\n        });\r\n      }else{\r\n        setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"Please Select Only JPG/JPEG/PNG\",\r\n        //   message: err.response.data\r\n        //     ? err.response.data.message\r\n        //     : err.response.statusText,\r\n      });\r\n    }\r\n      \r\n    }\r\n    \r\n    \r\n    //  if(identifier === \"profile\" && Imagefiletype.includes(file.type)){\r\n\r\n    \r\n    //   const data = new FormData();\r\n    //   data.append(\"file\", file);\r\n    //   data.append(\"upload_preset\",\"Test_post\");\r\n    //   data.append(\"cloud_name\",\"dipak1243\");\r\n    //   Axios.post(\"https://api.cloudinary.com/v1_1/dipak1243/image/upload\", data, {\r\n    //     headers: {\r\n    //       \"Content-Type\": \"multipart/form-data\",\r\n    //     },\r\n    //     onUploadProgress: (progressEvent) => {\r\n    //       setUploadPercentage(\r\n    //         parseInt(\r\n    //           Math.round((progressEvent.loaded * 100) / progressEvent.total)\r\n    //         )\r\n    //       );\r\n    //     },\r\n    //   })\r\n    //     .then((response) => {\r\n    //       console.log(response)\r\n    //       handleInput(identifier, response.data.url);\r\n    //       setPopup({\r\n    //         open: true,\r\n    //         severity: \"success\",\r\n    //         message: \"File uploaded successfully\",\r\n    //       });\r\n    //     })\r\n    //     .catch((err) => {\r\n    //       console.log(err.response);\r\n    //       setPopup({\r\n    //         open: true,\r\n    //         severity: \"error\",\r\n    //         message: \"Error while uploading\",\r\n    //         //   message: err.response.data\r\n    //         //     ? err.response.data.message\r\n    //         //     : err.response.statusText,\r\n    //       });\r\n    //     });\r\n    //   }else{\r\n    //     setPopup({\r\n    //       open: true,\r\n    //       severity: \"error\",\r\n    //       message: \"Please Select Only JPG/JPEG/PNG\",\r\n    //       //   message: err.response.data\r\n    //       //     ? err.response.data.message\r\n    //       //     : err.response.statusText,\r\n    //     });\r\n    //   }\r\n    \r\n  };\r\n\r\n  return (\r\n    <Grid container item xs={12} direction=\"column\" className={props.className}>\r\n      <Grid container item xs={12} spacing={0}>\r\n        <Grid item xs={3}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            component=\"label\"\r\n            style={{ width: \"100%\", height: \"100%\" }}\r\n          >\r\n            {props.icon}\r\n            <input\r\n              type=\"file\"\r\n              style={{ display: \"none\" }}\r\n              onChange={(event) => {\r\n              \r\n                setUploadPercentage(0);\r\n                setFile(event.target.files[0]);\r\n              }}\r\n              // onChange={onChange}\r\n              // onChange={\r\n              //   (e) => {}\r\n              //   //   setSource({ ...source, place_img: e.target.files[0] })\r\n              // }\r\n            />\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <TextField\r\n            label={props.label}\r\n            value={file ? file.name || \"\" : \"\"}\r\n            InputProps={{\r\n              readOnly: true,\r\n            }}\r\n            variant=\"outlined\"\r\n            style={{ width: \"100%\" }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            style={{ width: \"100%\", height: \"100%\" }}\r\n            onClick={() => handleUpload()}\r\n            disabled={file ? false : true}\r\n          >\r\n            <CloudUpload />\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      {uploadPercentage !== 0 ? (\r\n        <Grid item xs={12} style={{ marginTop: \"10px\" }}>\r\n          <LinearProgress variant=\"determinate\" value={uploadPercentage} />\r\n        </Grid>\r\n      ) : null}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default FileUploadInput;","D:\\prohiree-MERN\\prohiree\\client\\src\\component\\Welcome\\pager.js",["234","235"],"import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction pager({MaxPostPerAction, TotalPosts, ChangeButtonNumbers, Currentpage}) {\r\n\r\n    let numbers=[];\r\n    let NumberofButtons = TotalPosts/MaxPostPerAction;\r\n\r\n  \r\n    for(let i=1;i<Math.ceil(NumberofButtons);i++){\r\n        numbers.push(i)\r\n    }\r\n\r\n    return (<>\r\n        <nav aria-label=\"Page navigation example\">\r\n        <ul class=\"pagination\">\r\n            <li class=\"page-item\">\r\n            <a class=\"page-link\"  aria-label=\"Previous\">\r\n                <span aria-hidden=\"true\">&laquo;</span>\r\n                <span  onClick={()=>ChangeButtonNumbers()}>Previous</span>\r\n            </a>\r\n            </li>\r\n            {\r\n                    numbers?.map((place,i)=>\r\n                        <li className=\"page-item\"  key={i}>\r\n                            <NavLink to=\"\" onClick={()=>ChangeButtonNumbers(place)} className=\"page-link\" >{place}</NavLink>\r\n                        </li>)\r\n            }\r\n            <li class=\"page-item\">\r\n            <a class=\"page-link\" href=\"#\" aria-label=\"Next\">\r\n                <span aria-hidden=\"true\">&raquo;</span>\r\n                <span class=\"sr-only\">Next</span>\r\n            </a>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n\r\n        </> );\r\n}\r\n\r\nexport default pager;",{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","replacedBy":"239"},{"ruleId":"240","severity":1,"message":"241","line":20,"column":8,"nodeType":"242","messageId":"243","endLine":20,"endColumn":14},{"ruleId":"240","severity":1,"message":"244","line":39,"column":9,"nodeType":"242","messageId":"243","endLine":39,"endColumn":16},{"ruleId":"240","severity":1,"message":"245","line":7,"column":3,"nodeType":"242","messageId":"243","endLine":7,"endColumn":6},{"ruleId":"240","severity":1,"message":"246","line":3,"column":8,"nodeType":"242","messageId":"243","endLine":3,"endColumn":17},{"ruleId":"240","severity":1,"message":"247","line":4,"column":10,"nodeType":"242","messageId":"243","endLine":4,"endColumn":21},{"ruleId":"240","severity":1,"message":"248","line":4,"column":23,"nodeType":"242","messageId":"243","endLine":4,"endColumn":35},{"ruleId":"240","severity":1,"message":"249","line":14,"column":3,"nodeType":"242","messageId":"243","endLine":14,"endColumn":8},{"ruleId":"240","severity":1,"message":"250","line":15,"column":3,"nodeType":"242","messageId":"243","endLine":15,"endColumn":17},{"ruleId":"240","severity":1,"message":"251","line":16,"column":3,"nodeType":"242","messageId":"243","endLine":16,"endColumn":14},{"ruleId":"240","severity":1,"message":"252","line":17,"column":3,"nodeType":"242","messageId":"243","endLine":17,"endColumn":13},{"ruleId":"240","severity":1,"message":"253","line":18,"column":3,"nodeType":"242","messageId":"243","endLine":18,"endColumn":16},{"ruleId":"240","severity":1,"message":"254","line":19,"column":3,"nodeType":"242","messageId":"243","endLine":19,"endColumn":13},{"ruleId":"240","severity":1,"message":"255","line":21,"column":8,"nodeType":"242","messageId":"243","endLine":21,"endColumn":18},{"ruleId":"240","severity":1,"message":"256","line":25,"column":8,"nodeType":"242","messageId":"243","endLine":25,"endColumn":17},{"ruleId":"240","severity":1,"message":"257","line":26,"column":8,"nodeType":"242","messageId":"243","endLine":26,"endColumn":23},{"ruleId":"240","severity":1,"message":"258","line":27,"column":8,"nodeType":"242","messageId":"243","endLine":27,"endColumn":16},{"ruleId":"240","severity":1,"message":"259","line":33,"column":8,"nodeType":"242","messageId":"243","endLine":33,"endColumn":23},{"ruleId":"240","severity":1,"message":"260","line":38,"column":10,"nodeType":"242","messageId":"243","endLine":38,"endColumn":14},{"ruleId":"240","severity":1,"message":"261","line":38,"column":16,"nodeType":"242","messageId":"243","endLine":38,"endColumn":22},{"ruleId":"240","severity":1,"message":"262","line":58,"column":7,"nodeType":"242","messageId":"243","endLine":58,"endColumn":22},{"ruleId":"240","severity":1,"message":"263","line":159,"column":10,"nodeType":"242","messageId":"243","endLine":159,"endColumn":19},{"ruleId":"240","severity":1,"message":"264","line":159,"column":21,"nodeType":"242","messageId":"243","endLine":159,"endColumn":33},{"ruleId":"240","severity":1,"message":"265","line":424,"column":7,"nodeType":"242","messageId":"243","endLine":424,"endColumn":14},{"ruleId":"240","severity":1,"message":"266","line":429,"column":8,"nodeType":"242","messageId":"243","endLine":429,"endColumn":24},{"ruleId":"240","severity":1,"message":"267","line":430,"column":7,"nodeType":"242","messageId":"243","endLine":430,"endColumn":21},{"ruleId":"240","severity":1,"message":"268","line":436,"column":7,"nodeType":"242","messageId":"243","endLine":436,"endColumn":21},{"ruleId":"240","severity":1,"message":"269","line":439,"column":7,"nodeType":"242","messageId":"243","endLine":439,"endColumn":23},{"ruleId":"270","severity":1,"message":"271","line":547,"column":129,"nodeType":"272","endLine":547,"endColumn":175},{"ruleId":"240","severity":1,"message":"273","line":15,"column":3,"nodeType":"242","messageId":"243","endLine":15,"endColumn":12},{"ruleId":"240","severity":1,"message":"274","line":21,"column":8,"nodeType":"242","messageId":"243","endLine":21,"endColumn":18},{"ruleId":"270","severity":1,"message":"275","line":134,"column":23,"nodeType":"272","endLine":134,"endColumn":26},{"ruleId":"270","severity":1,"message":"275","line":134,"column":45,"nodeType":"272","endLine":134,"endColumn":48},{"ruleId":"276","severity":1,"message":"277","line":568,"column":6,"nodeType":"278","endLine":568,"endColumn":8,"suggestions":"279"},{"ruleId":"240","severity":1,"message":"254","line":6,"column":3,"nodeType":"242","messageId":"243","endLine":6,"endColumn":13},{"ruleId":"240","severity":1,"message":"250","line":7,"column":3,"nodeType":"242","messageId":"243","endLine":7,"endColumn":17},{"ruleId":"240","severity":1,"message":"280","line":10,"column":3,"nodeType":"242","messageId":"243","endLine":10,"endColumn":12},{"ruleId":"240","severity":1,"message":"281","line":13,"column":3,"nodeType":"242","messageId":"243","endLine":13,"endColumn":9},{"ruleId":"240","severity":1,"message":"282","line":14,"column":3,"nodeType":"242","messageId":"243","endLine":14,"endColumn":19},{"ruleId":"240","severity":1,"message":"273","line":15,"column":3,"nodeType":"242","messageId":"243","endLine":15,"endColumn":12},{"ruleId":"240","severity":1,"message":"283","line":16,"column":3,"nodeType":"242","messageId":"243","endLine":16,"endColumn":11},{"ruleId":"240","severity":1,"message":"284","line":17,"column":3,"nodeType":"242","messageId":"243","endLine":17,"endColumn":11},{"ruleId":"276","severity":1,"message":"277","line":230,"column":6,"nodeType":"278","endLine":230,"endColumn":8,"suggestions":"285"},{"ruleId":"240","severity":1,"message":"286","line":1,"column":22,"nodeType":"242","messageId":"243","endLine":1,"endColumn":31},{"ruleId":"240","severity":1,"message":"287","line":6,"column":3,"nodeType":"242","messageId":"243","endLine":6,"endColumn":8},{"ruleId":"240","severity":1,"message":"280","line":4,"column":3,"nodeType":"242","messageId":"243","endLine":4,"endColumn":12},{"ruleId":"240","severity":1,"message":"287","line":10,"column":3,"nodeType":"242","messageId":"243","endLine":10,"endColumn":8},{"ruleId":"240","severity":1,"message":"245","line":11,"column":3,"nodeType":"242","messageId":"243","endLine":11,"endColumn":6},{"ruleId":"276","severity":1,"message":"288","line":16,"column":6,"nodeType":"278","endLine":16,"endColumn":8,"suggestions":"289"},{"ruleId":"240","severity":1,"message":"287","line":6,"column":3,"nodeType":"242","messageId":"243","endLine":6,"endColumn":8},{"ruleId":"240","severity":1,"message":"258","line":15,"column":8,"nodeType":"242","messageId":"243","endLine":15,"endColumn":16},{"ruleId":"240","severity":1,"message":"290","line":109,"column":10,"nodeType":"242","messageId":"243","endLine":109,"endColumn":18},{"ruleId":"240","severity":1,"message":"291","line":109,"column":20,"nodeType":"242","messageId":"243","endLine":109,"endColumn":31},{"ruleId":"240","severity":1,"message":"292","line":110,"column":10,"nodeType":"242","messageId":"243","endLine":110,"endColumn":14},{"ruleId":"276","severity":1,"message":"277","line":137,"column":6,"nodeType":"278","endLine":137,"endColumn":8,"suggestions":"293"},{"ruleId":"240","severity":1,"message":"294","line":169,"column":9,"nodeType":"242","messageId":"243","endLine":169,"endColumn":20},{"ruleId":"240","severity":1,"message":"295","line":173,"column":9,"nodeType":"242","messageId":"243","endLine":173,"endColumn":20},{"ruleId":"240","severity":1,"message":"250","line":7,"column":3,"nodeType":"242","messageId":"243","endLine":7,"endColumn":17},{"ruleId":"240","severity":1,"message":"280","line":10,"column":3,"nodeType":"242","messageId":"243","endLine":10,"endColumn":12},{"ruleId":"240","severity":1,"message":"281","line":13,"column":3,"nodeType":"242","messageId":"243","endLine":13,"endColumn":9},{"ruleId":"240","severity":1,"message":"273","line":15,"column":3,"nodeType":"242","messageId":"243","endLine":15,"endColumn":12},{"ruleId":"240","severity":1,"message":"283","line":16,"column":3,"nodeType":"242","messageId":"243","endLine":16,"endColumn":11},{"ruleId":"240","severity":1,"message":"296","line":18,"column":3,"nodeType":"242","messageId":"243","endLine":18,"endColumn":9},{"ruleId":"240","severity":1,"message":"297","line":21,"column":8,"nodeType":"242","messageId":"243","endLine":21,"endColumn":14},{"ruleId":"240","severity":1,"message":"298","line":29,"column":19,"nodeType":"242","messageId":"243","endLine":29,"endColumn":25},{"ruleId":"276","severity":1,"message":"277","line":692,"column":6,"nodeType":"278","endLine":692,"endColumn":8,"suggestions":"299"},{"ruleId":"240","severity":1,"message":"300","line":1,"column":20,"nodeType":"242","messageId":"243","endLine":1,"endColumn":25},{"ruleId":"240","severity":1,"message":"250","line":7,"column":3,"nodeType":"242","messageId":"243","endLine":7,"endColumn":17},{"ruleId":"240","severity":1,"message":"280","line":10,"column":3,"nodeType":"242","messageId":"243","endLine":10,"endColumn":12},{"ruleId":"240","severity":1,"message":"281","line":13,"column":3,"nodeType":"242","messageId":"243","endLine":13,"endColumn":9},{"ruleId":"240","severity":1,"message":"282","line":14,"column":3,"nodeType":"242","messageId":"243","endLine":14,"endColumn":19},{"ruleId":"240","severity":1,"message":"273","line":15,"column":3,"nodeType":"242","messageId":"243","endLine":15,"endColumn":12},{"ruleId":"240","severity":1,"message":"283","line":16,"column":3,"nodeType":"242","messageId":"243","endLine":16,"endColumn":11},{"ruleId":"240","severity":1,"message":"301","line":20,"column":10,"nodeType":"242","messageId":"243","endLine":20,"endColumn":19},{"ruleId":"240","severity":1,"message":"302","line":450,"column":9,"nodeType":"242","messageId":"243","endLine":450,"endColumn":17},{"ruleId":"240","severity":1,"message":"303","line":460,"column":9,"nodeType":"242","messageId":"243","endLine":460,"endColumn":18},{"ruleId":"276","severity":1,"message":"277","line":717,"column":6,"nodeType":"278","endLine":717,"endColumn":8,"suggestions":"304"},{"ruleId":"270","severity":1,"message":"271","line":18,"column":71,"nodeType":"272","endLine":18,"endColumn":83},{"ruleId":"270","severity":1,"message":"271","line":19,"column":71,"nodeType":"272","endLine":19,"endColumn":83},{"ruleId":"270","severity":1,"message":"271","line":20,"column":71,"nodeType":"272","endLine":20,"endColumn":83},{"ruleId":"270","severity":1,"message":"271","line":21,"column":71,"nodeType":"272","endLine":21,"endColumn":83},{"ruleId":"270","severity":1,"message":"271","line":22,"column":71,"nodeType":"272","endLine":22,"endColumn":83},{"ruleId":"270","severity":1,"message":"271","line":28,"column":74,"nodeType":"272","endLine":28,"endColumn":86},{"ruleId":"270","severity":1,"message":"271","line":29,"column":74,"nodeType":"272","endLine":29,"endColumn":86},{"ruleId":"270","severity":1,"message":"271","line":30,"column":74,"nodeType":"272","endLine":30,"endColumn":86},{"ruleId":"270","severity":1,"message":"271","line":31,"column":74,"nodeType":"272","endLine":31,"endColumn":86},{"ruleId":"270","severity":1,"message":"271","line":32,"column":74,"nodeType":"272","endLine":32,"endColumn":86},{"ruleId":"270","severity":1,"message":"271","line":38,"column":74,"nodeType":"272","endLine":38,"endColumn":86},{"ruleId":"270","severity":1,"message":"271","line":39,"column":74,"nodeType":"272","endLine":39,"endColumn":86},{"ruleId":"270","severity":1,"message":"271","line":40,"column":74,"nodeType":"272","endLine":40,"endColumn":86},{"ruleId":"270","severity":1,"message":"271","line":41,"column":74,"nodeType":"272","endLine":41,"endColumn":86},{"ruleId":"270","severity":1,"message":"271","line":42,"column":74,"nodeType":"272","endLine":42,"endColumn":86},{"ruleId":"270","severity":1,"message":"271","line":51,"column":25,"nodeType":"272","endLine":51,"endColumn":36},{"ruleId":"270","severity":1,"message":"271","line":52,"column":25,"nodeType":"272","endLine":52,"endColumn":36},{"ruleId":"270","severity":1,"message":"271","line":53,"column":25,"nodeType":"272","endLine":53,"endColumn":36},{"ruleId":"270","severity":1,"message":"271","line":54,"column":25,"nodeType":"272","endLine":54,"endColumn":36},{"ruleId":"240","severity":1,"message":"287","line":6,"column":3,"nodeType":"242","messageId":"243","endLine":6,"endColumn":8},{"ruleId":"276","severity":1,"message":"277","line":53,"column":6,"nodeType":"278","endLine":53,"endColumn":8,"suggestions":"305"},{"ruleId":"240","severity":1,"message":"306","line":11,"column":8,"nodeType":"242","messageId":"243","endLine":11,"endColumn":15},{"ruleId":"240","severity":1,"message":"307","line":12,"column":8,"nodeType":"242","messageId":"243","endLine":12,"endColumn":13},{"ruleId":"240","severity":1,"message":"308","line":16,"column":9,"nodeType":"242","messageId":"243","endLine":16,"endColumn":16},{"ruleId":"240","severity":1,"message":"309","line":46,"column":19,"nodeType":"242","messageId":"243","endLine":46,"endColumn":29},{"ruleId":"276","severity":1,"message":"310","line":80,"column":3,"nodeType":"278","endLine":80,"endColumn":11,"suggestions":"311"},{"ruleId":"270","severity":1,"message":"271","line":105,"column":25,"nodeType":"272","endLine":105,"endColumn":82},{"ruleId":"270","severity":1,"message":"271","line":350,"column":21,"nodeType":"272","endLine":350,"endColumn":59},{"ruleId":"270","severity":1,"message":"271","line":367,"column":52,"nodeType":"272","endLine":367,"endColumn":64},{"ruleId":"270","severity":1,"message":"271","line":377,"column":48,"nodeType":"272","endLine":377,"endColumn":60},{"ruleId":"270","severity":1,"message":"271","line":437,"column":33,"nodeType":"272","endLine":437,"endColumn":65},{"ruleId":"270","severity":1,"message":"271","line":566,"column":37,"nodeType":"272","endLine":566,"endColumn":49},{"ruleId":"270","severity":1,"message":"271","line":583,"column":37,"nodeType":"272","endLine":583,"endColumn":49},{"ruleId":"270","severity":1,"message":"271","line":600,"column":37,"nodeType":"272","endLine":600,"endColumn":49},{"ruleId":"240","severity":1,"message":"273","line":15,"column":3,"nodeType":"242","messageId":"243","endLine":15,"endColumn":12},{"ruleId":"240","severity":1,"message":"274","line":21,"column":8,"nodeType":"242","messageId":"243","endLine":21,"endColumn":18},{"ruleId":"276","severity":1,"message":"277","line":715,"column":6,"nodeType":"278","endLine":715,"endColumn":8,"suggestions":"312"},{"ruleId":"313","severity":1,"message":"314","line":731,"column":33,"nodeType":"315","messageId":"316","endLine":731,"endColumn":35},{"ruleId":"313","severity":1,"message":"314","line":737,"column":33,"nodeType":"315","messageId":"316","endLine":737,"endColumn":35},{"ruleId":"313","severity":1,"message":"314","line":743,"column":32,"nodeType":"315","messageId":"316","endLine":743,"endColumn":34},{"ruleId":"240","severity":1,"message":"317","line":11,"column":11,"nodeType":"242","messageId":"243","endLine":11,"endColumn":19},{"ruleId":"270","severity":1,"message":"275","line":18,"column":13,"nodeType":"272","endLine":18,"endColumn":57},{"ruleId":"270","severity":1,"message":"271","line":30,"column":13,"nodeType":"272","endLine":30,"endColumn":61},"no-native-reassign",["318"],"no-negated-in-lhs",["319"],"no-unused-vars","'isAuth' is defined but never used.","Identifier","unusedVar","'classes' is assigned a value but never used.","'Box' is defined but never used.","'ReCAPTCHA' is defined but never used.","'GoogleLogin' is defined but never used.","'GoogleLogout' is defined but never used.","'Input' is defined but never used.","'InputAdornment' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'OutlinedInput' is defined but never used.","'IconButton' is defined but never used.","'SearchIcon' is defined but never used.","'ChipInput' is defined but never used.","'DescriptionIcon' is defined but never used.","'FaceIcon' is defined but never used.","'FileUploadInput' is defined but never used.","'Flag' is defined but never used.","'Search' is defined but never used.","'MultifieldInput' is assigned a value but never used.","'education' is assigned a value but never used.","'setEducation' is assigned a value but never used.","'history' is assigned a value but never used.","'showlogoutButton' is assigned a value but never used.","'onLoginSuccess' is assigned a value but never used.","'onLoginFailure' is assigned a value but never used.","'onSignoutSuccess' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'FormGroup' is defined but never used.","'Pagination' is defined but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["320"],"'TextField' is defined but never used.","'Slider' is defined but never used.","'FormControlLabel' is defined but never used.","'MenuItem' is defined but never used.","'Checkbox' is defined but never used.",["321"],"'useEffect' is defined but never used.","'Modal' is defined but never used.","React Hook useEffect has a missing dependency: 'setPopup'. Either include it or remove the dependency array.",["322"],"'userData' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'open' is assigned a value but never used.",["323"],"'handleClose' is assigned a value but never used.","'editDetails' is assigned a value but never used.","'Avatar' is defined but never used.","'Rating' is defined but never used.","'server' is defined but never used.",["324"],"'Slide' is defined but never used.","'useParams' is defined but never used.","'colorSet' is assigned a value but never used.","'getResume' is assigned a value but never used.",["325"],["326"],"'apiList' is defined but never used.","'Pager' is defined but never used.","'Options' is assigned a value but never used.","'setPerPage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'perPage'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPageCount' needs the current value of 'perPage'.",["327"],["328"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'uploadTo' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"329","fix":"330"},{"desc":"329","fix":"331"},{"desc":"332","fix":"333"},{"desc":"329","fix":"334"},{"desc":"329","fix":"335"},{"desc":"329","fix":"336"},{"desc":"329","fix":"337"},{"desc":"338","fix":"339"},{"desc":"329","fix":"340"},"Update the dependencies array to be: [getData]",{"range":"341","text":"342"},{"range":"343","text":"342"},"Update the dependencies array to be: [setPopup]",{"range":"344","text":"345"},{"range":"346","text":"342"},{"range":"347","text":"342"},{"range":"348","text":"342"},{"range":"349","text":"342"},"Update the dependencies array to be: [offset, perPage]",{"range":"350","text":"351"},{"range":"352","text":"342"},[17879,17881],"[getData]",[6272,6274],[437,439],"[setPopup]",[3540,3542],[20984,20986],[22460,22462],[1091,1093],[2327,2335],"[offset, perPage]",[22238,22240]]